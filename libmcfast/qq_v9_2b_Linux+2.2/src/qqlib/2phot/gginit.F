*
* $Id$
*
* $Log$
* Revision 1.1  2000/06/19 20:00:33  eugenio
* Initial revision
*
* Revision 1.1.1.1  1994/10/08  02:21:35  zfiles
* first version of qqlib in CVS
*
*
#include "sys/CLEO_machine.h"
#include "pilot.h"
*CMZ :  1.04/00 22/09/94  00.23.09  by  Paul Avery
*CMZ :  1.03/36 07/12/91  11.37.08  by  R.A.FULTON
*CMZ :  1.03/15 25/04/91  18.03.46  by  R.A.FULTON
*-- Author :
      SUBROUTINE GGINIT
C**********************************************
C initialize two-photon event generator gggen0.
C sequence is:
C   2) initialize internal parameters.
C   3) compute normalization.
C   4) print summary for user.
C********************************************
#include "seq/clinc/qqevnt.inc"
#include "qqlib/gggseq/ggconst.inc"
#include "qqlib/gggseq/ggprms.inc"
#include "qqlib/gggseq/sintag.inc"
#include "qqlib/gggseq/fragmt.inc"
#include "qqlib/gggseq/ggmodl.inc"
#include "qqlib/gggseq/wgtsum.inc"
#include "qqlib/gggseq/genarg.inc"
#include "qqlib/seq/ludat2.inc"
#include "geant/gcdes/ludat3.inc"
#include "qqlib/seq/ludat4.inc"

        INTEGER  I, IDC, IDUM, IP, ISEQ
        INTEGER  KCRES, KP, N, NP, NPOIT, NSTP, NLOOP

        LOGICAL PRTEPA
        REAL  DBTGNM, DUM
        REAL  EPLTH, EMN2G, EMX2G, FGRES, FGVAL
        REAL  GWVAR, HLPIFA, PHINT1
        REAL  PR2VA1, PR2VAL, PREVA1, PREVAL, PRSDEP, QR
        REAL  RSTP, RSTPI, RSTPSD, RN, SI2, SIG, SINV
        REAL  SU2, SUM, SUME, TBMAMA, TBMIMI, TEBW, TEMI
        REAL  X2GCH1, X2GCH2, XM, XM2, XMRES2, XMTHR, XNORM
        REAL  W2GCH2, EBMIN, AC12


C EXTERNALS::
        INTEGER   LUCOMP
        REAL      GGPOIT
        EXTERNAL  LUCOMP, GGPOIT
C DEFAULTS
C  KCRES   -  KC code for resonance
C  EPB1    -  Beam energy for electron
C  EPB2    -  Beam energy for positron
C  EMN2G   -  Minimum energy for gam-gam system
C  EMX2G   -  Maximum energy for gam-gam system
C  WMX2G   -  EMX2G*EMX2G
      KCRES  = LUCOMP(KFRES)
      EPB1   = ECM/2.0
      EPB2   = ECM/2.0
      EMN2G  = SQRT(WMN2G)
      EMX2G  = 2.0*SQRT((EPB1 - XME)*(EPB2 - XME))
      EMX2G  = AMIN1(EMX2G,SQRT(WMX2G))
      WMX2G  = EMX2G*EMX2G
      EPAMAX = 0.
      PRTEPA = .FALSE.

C CONSISTENCY CHECKS AND PATCH-UPS IF NECESSARY
      IF(MODE2G.EQ.1.OR.MODE2G.EQ.2)THEN
         PAIR2G = PMAS(KCRES, 1)
      ELSEIF(MODE2G .EQ. 3)THEN
         W2GCH2 = PMAS(KCRES,2)
         IF(   JRES2G .LT. 0 .OR. JRES2G .GT. 2      .OR.
     +         LHRS2G .LT. 0 .OR. LHRS2G .GT. JRES2G .OR.
     +         JPAR2G .EQ. 0 .OR. JPAR2G .EQ. -99)WRITE(6,123)
      ENDIF
 123     FORMAT(1H0,10X,'>>>GGINIT ERROR. invalid or unavailable'/
     +     14X,'SPIN-HELICITY-PARITY state requested for MODE2G=3.'/
     +     14X,'check .CTR file for JRESGG, LHRSGG, AND JPARGG')
C
C************************************************
C INITIALIZATION OF /GGPRMS/ AND /GGMODL/
C************************************************
C
      DTAG=1.
      D2GTH=1.
      IF(NTAG2G.EQ.1)THEN
         DTAG = ALOG(SIN(TAGMX/2.)/SIN(TAGMN/2.))
         IF(F2TYPE.EQ.2)THEN
           DTAG = 1./SIN(TAGMN/2.) - 1./SIN(TAGMX/2.)
         ELSEIF(F2TYPE.EQ.1) THEN
           DTAG = 1./(SIN(TAGMN/2.))**2 - 1./(SIN(TAGMX/2.))**2
         ELSEIF(F2TYPE.EQ.5) THEN
           DTAG = 1./(SIN(TAGMN/2.))**2 - 1./(SIN(TAGMX/2.))**2
         ENDIF
      ELSEIF(NTAG2G.EQ.2)THEN
         DTCNST = 1.25E-13
         D1GTH=(SIN(TAGMX/2.)**2+DTCNST)/(SIN(TAGMN/2.)**2+DTCNST)
         D1GTH=ALOG(D1GTH)
         D2GTH=(SIN(DBTGMX/2.)**2+DTCNST)/(SIN(DBTGMN/2.)**2+DTCNST)
         D2GTH=ALOG(D2GTH)
      ELSEIF(NTAG2G.EQ.0)THEN
         D2GTH=ALOG(0.7*ECM/(2.*XME))
      ENDIF

      T1MIN  = TAGMX
      T3MIN  = TAGMX
      T2MAX  = 0.0
      T3MAX  = 0.0

      IF(NTAG2G.EQ.0)THEN
        WRITE(6,101)
      ELSEIF(NTAG2G.EQ.1)THEN
        WRITE(6,102)TAGMN,TAGMX,ANGUNT,EBMIN
      ELSEIF(NTAG2G.EQ.2)THEN
        WRITE(6,103)TAGMN,TAGMX,DBTGMN,DBTGMX
      ENDIF
      WRITE(6,107)EPAUPS
 101  FORMAT(5X,' NO-TAGGING     = DALITZ-YENNIE FORMULA')
 102  FORMAT(5X,' SINGLE-TAGGING = FIELD-BERGER FORMULA'/
     +  5X,' MINIMUM TAGGING ANGLE = ',G12.6,' RADIANS'/
     +  5X,' MAXIMUM TAGGING ANGLE = ',G12.6,' RADIANS'/
     +  5X,' ANTI-TAGGING AT = ',G12.6,' RADIANS'/
     +  5X,' MINIMUM TAG ENERGY = ',G12.6,' GEV')
 103  FORMAT(5X,' DOUBLE-TAGGING = BONNEAU-GOURDAN-MARTIN FORMULA'/
     +  5X,' MINIMUM TAGGING ANGLE #1 = ',G12.6,' RADIANS'/
     +  5X,' MAXIMUM TAGGING ANGLE #1 = ',G12.6,' RADIANS'/
     +  5X,' MINIMUM TAGGING ANGLE #2 = ',G12.6,' RADIANS'/
     +  5X,' MAXIMUM TAGGING ANGLE #2 = ',G12.6,' RADIANS'/)

 107    FORMAT(
     +  5X,' EPA MAX SO FAR = ',G12.6/)
        STBEGN = SIN(TAGMN/2.0)

C...MODELS 3,4 ARE IDENTICAL IN DTAG SO TAKE THIS AS DEFAULT.
       DTAG1  = DTAG
       IF(F2TYPE .EQ. 2)THEN
          DTAG1  = DTAG*STBEGN
       ELSEIF(F2TYPE .EQ. 1)THEN
          DTAG1  = DTAG*(STBEGN**2)
       ELSEIF(F2TYPE .EQ. 5)THEN
          DTAG1  = DTAG*(STBEGN**2)
       ENDIF
       IF(NTAG2G .EQ. 2)THEN
         DT1BGN = SIN(TAGMN/2.)**2 + DTCNST
         DT2BGN = SIN(DBTGMN/2.)**2+ DTCNST
       ENDIF
       SSQMN  = 0.0
       SSQMX  = 2.*(SIN(ANGUNT/2.))**2
C FACT2G converts wgts and efficiencies to cross section (NB)
C
C START WITH 2*ALF**4/PI (TIMES (HBAR*C)**2).
C THIS NORMALIZES POINT CROSS SECTIONS (FOR UNIT CHARGE PARTICLES;
C QUARK COUPLINGS ARE RENORMALIZED IN GGPOIT).
      FACT2G = 7.037E-4
C COLOR FACTOR FOR MODEL 5 IS PUT IN HERE, HOWEVER, SINCE IT IS
C THE SAME FOR ANY COMBINATION OF QUARK SELECTIONS.
C**FOR**FLAT STRUCTURE FUNCTION **REMOVE THIS NORMALIZATION***
C     IF(MODE2G.EQ.5)FACT2G=3.*FACT2G
C RESONANCE: MULTIPLY BY 1/ALF**2 (TIMES E-6 FOR WIDTH*BR IN KEV).
C SPIN FACTOR IS ALSO INCLUDED HERE.
      IF(MODE2G.EQ.3)
     +       FACT2G = 2.0*FACT2G*0.018769*FLOAT(2*JRES2G+1)
C MODEL 0: CROSS SECTION IS INPUT IN NB SO REMOVE A
C FACTOR OF 1./(4*PI*ALF**2) AND REMOVE FACTOR OF (HBAR*C)**2.
      IF(MODE2G.EQ.0) FACT2G=FACT2G*.003838
C*********FOR**FLAT STRUCTURE FUNCTION **********************
      IF(MODE2G.EQ.5) FACT2G=FACT2G*.00383833
C SINGLE TAGGING WEIGHTS ARE FOR ONE SIDE ONLY...NEED A FACTOR OF 2
      IF(NTAG2G.EQ.1) FACT2G=2.*FACT2G
C
C PAIR PRODUCTION...MODELS 1 AND 2
C
      IF(MODE2G.EQ.1.OR.MODE2G.EQ.2) EMN2G=AMAX1(EMN2G,2.*PAIR2G)
C
C RESONANCE PRODUCTION...MODEL 3
C SEE FARTHER EXPLANATION ON BREIT WIGNER GENERATION
C
      IF(MODE2G.NE.3)GOTO 60
C       MASS and WIDTH
C       check the decay sequence to set thresholds
        XMTHR = 0.0
C       Check if particle can decay
        IF(MDCY(KCRES,1) .GT. 0) THEN
C         Get entry point into decay table
          IDC = MDCY(KCRES,2)
          DO 611 IP=1,5
C          Get KF code for decay product IP
           NP = KFDP(IDC,IP)
C          check if empty position
           IF(NP.GT.0) THEN
C            convert to KC code
             NP = LUCOMP(NP)
C            add lower mass limit to threshold
             XMTHR = XMTHR + PMAS(NP,1) - PMAS(NP,3)
           ENDIF
C          if continuation include second line of decay channel
           IF(MDME(IDC+1,2) .EQ. 101)THEN
             NP = KFDP(IDC+1,IP)
             IF(NP.GT.0) THEN
               NP = LUCOMP(NP)
               XMTHR = XMTHR + PMAS(NP,1) - PMAS(NP,3)
             ENDIF
           ENDIF
 611      CONTINUE
        ENDIF
        IF(XMTHR .LT. 0.0)XMTHR=0.0

C       the following masses are used for calculating the Breit-Wigner shape
C       we assume a two-body decay, so this is an approximation
        X2GCH1   =  0.5*XMTHR
        X2GCH2   =  0.5*XMTHR
        XMRS2G   =  PMAS(KCRES,1)
        XMRES2   =  XMRS2G**2
        WMRS2G   =  XMRS2G*PMAS(KCRES,2)
        EMN2G    =  XMRS2G
        EMX2G    =  XMRS2G
        HLPIFA   =  HALFPI-0.0001
        TBMI2G   = -HLPIFA
        TBMA2G   =  HLPIFA
        TBMIMI   = -HLPIFA
        TBMAMA   =  HLPIFA
C       If width is finite, calculate mass (and phase shift) limits.
C       Note: two sets of limits are involved here. the limits for
C       event generation (default is five widths) and the extreme
C       limits implied by decay product masses and beam energies.
C       the latter are needed for proper normalization.
        IF(WMRS2G.LE.0.0001)GOTO 61
        WMN2G=XMRES2-BWMG2G*WMRS2G
        IF(WMN2G.LE.0.0001) WMN2G=0.0001
        EMN2G=SQRT(WMN2G)
        WMN2G=EMN2G**2
        TBMI2G=ATAN((WMN2G-XMRES2)/WMRS2G)
        IF(TBMI2G.GE.HALFPI) TBMI2G=TBMI2G-PI
        IF(TBMI2G.LE.-HLPIFA) TBMI2G=-HLPIFA
        TBMIMI=ATAN(((X2GCH1+X2GCH2)**2-XMRES2)/WMRS2G)
        IF(TBMIMI.GE.HALFPI) TBMIMI=TBMIMI-PI
        IF(TBMIMI.LE.-HLPIFA) TBMIMI=-HLPIFA
        TBMA2G=ATAN(BWMG2G)
        IF(TBMA2G.GE.HLPIFA) TBMA2G=HLPIFA
        TBMAMA=ATAN((WMX2G-XMRES2)/WMRS2G)
        IF(TBMAMA.GE.HLPIFA) TBMAMA=HLPIFA
        IF(TBMAMA.LE.TBMA2G) TBMA2G=TBMAMA
        EMX2G=SQRT(XMRES2+WMRS2G*TAN(TBMA2G))
        FGRES=1.
        CALL BREWIG(XMRES2,QR,JRES2G,XMRS2G,WMRS2G,
     +              X2GCH1,X2GCH2,FGRES,XNORM)
 61   CONTINUE
C  INTEGRATE DECAY ANGULAR DISTRBUTION
      IF(COS2GX.GE.0.99999)GOTO 60
      PHINT1=COS2GX
      IF(JRES2G.EQ.0)GOTO 62
      IF(JRES2G.EQ.2)GOTO 64
      IF(LHRS2G.EQ.0)PHINT1=COS2GX**3
      IF(LHRS2G.EQ.1)PHINT1=(1.5-0.5*COS2GX**2)*COS2GX
      GOTO 62
 64   CONTINUE
      IF(LHRS2G.EQ.0) PHINT1=(2.25 *(COS2GX**4)-2.5 *(COS2GX**2)
     +                   +1.25 )*COS2GX
      IF(LHRS2G.EQ.1) PHINT1=(5.-3.*(COS2GX**2))*.5*(COS2GX**3)
      IF(LHRS2G.EQ.2) PHINT1=(0.375*(COS2GX**4)-1.25*(COS2GX**2)
     +                   +1.875)*COS2GX
 62   FACT2G=FACT2G*PHINT1
 60   CONTINUE
C
C
C NOW PARAMETERS THAT MIGHT HAVE BEEN CHANGED BY MODELS
C
      IF(EMX2G.LT.EMN2G)GOTO 67
      WMN2G = EMN2G**2
      WMX2G = EMX2G**2
      IF(NTAG2G.EQ.0)YLTH2G=ALOG(4.*(EPB1-XME)*(EPB2-XME)/WMN2G)
      AC12=(SIN(TAGMN/2.))**2
      IF(NTAG2G.GE.1)AC12=0.0
      EPLTH=(EPB1-XME)*(EPB2-XME)
      IF(NTAG2G.GE.1)YLTH2G=ABS(ALOG(AC12+(1-AC12)*WMN2G/(4.*EPLTH)))
      IF(YLTH2G.GE.0.)GOTO 69
C IF WE HAVE VIOLATED ENERGY CONSERVATION THEN BITCH AND QUIT.
  67  WRITE(6,68)
  68  FORMAT(1H0,10X,'>>>GGINIT ERROR. BEAM ENERGY TO LOW OR'/29X,
     +    'MINIMUM MASS REQUESTED EXCEEDS MAXIMUM MASS REQUESTED.')
      STOP
 69   CONTINUE
C*****************************************************
C INITIALIZE NORMALIZATION AND COMPUTE INTEGRAL TABLES FOR USE
C DURING EVENT GENERATION.
C*****************************************************
C
      TRY2G=0.
      OK2G=0.
      NEPAUP=0
      EPAUPS=0.0
      ITERS = 0
      WSUM = 0.0D0+00
      WSUMSQ = 0.0D+00
C
C Phase space areas for throw-away technique
C
      GGAREA=1.
      IF(MODE2G.EQ.3) GGAREA=(TBMA2G-TBMI2G)
      IF(MODE2G.EQ.0) GGAREA=X2G0*ALOG(WMX2G/WMN2G)
      IF((MODE2G.EQ.1).OR.(MODE2G.EQ.2)) GGAREA=1./WMN2G-1./WMX2G
      IF(MODE2G.EQ.5)THEN
      GGAREA=X2G0*ALOG(WMX2G/WMN2G)
      IF(F2TYPE.EQ.4)THEN
        GGAREA=X2G0*(1.0/(WMN2G)-1.0/(WMX2G))
      ENDIF
      ENDIF
      D2GW=GGAREA
C MULTIPLY IN RAPIDITY LENGTH
      GGAREA=GGAREA*YLTH2G
C
C NOW INTEGRATE POINT-PARTICLE CROSS SECTION FOR MODELS 1,2,AND 5
C
C****FEYNMAN*FIELD*DECAY*OF*RESONANCE*MODEL*3**SPECIAL***
C     IF(MODE2G.NE.1.AND.MODE2G.NE.2.AND.MODE2G.NE.5.AND.MODE2G.NE.3)
C*****FLAT*STRUCTURE**FUNCTION**MODEL*5****************************
      IF(MODE2G.NE.1.AND.MODE2G.NE.2.AND.MODE2G.NE.3)
     +                        GOTO 80
      RSTPSD=NSTPSD
      RSTPI=D2GW/(RSTPSD-1.)
      PREVAL=0.
      SIG=0.
      DO 70 N=1,NSTPSD
      RN=N-1
      SINV=RN*RSTPI+1./WMX2G
      PRSDEP=GGPOIT(SINV,IDUM,DUM,NUMQRK)
      IF(MODE2G.EQ.3)GOTO 80
      IF(N.EQ.1)GOTO 76
C SUMMATION OF CROSS SECTION
      SIG=SIG+0.5*(PRSDEP+PREVAL)*RSTPI
C SAVE PARTIAL INTEGRAL FOR USE DURING EVENT GENERATION
 76   XSINT(N)=SIG
      PREVAL=PRSDEP
 70   CONTINUE
C
C RECOMPUTE GGAREA FOR THESE MODELS TO INCLUDE CROSS SECTION
      GGAREA=SIG*YLTH2G
 80   CONTINUE
C
C RESONANCE PRODUCTION : INTEGRATE BREIT-WIGNER FOR WIDTH*BR OF 1 KEV
C
C GENERATED VARIABLE IS THETA=ATAN((M**2-MRES**2)/MRES*WIDRES0)
C WHERE MRES AND WIDRES0 ARE THE PDG NOMINAL MASS AND WIDTH.
C IN SUBROUTINE BREWIG WE GENERATE A MASS DEPENDENT WIDTH,
C SO DN/D(THETA) INSTEAD OF BEING FLAT IS =
C BW(VARIABLE WIDTH)/BW(WIDRES0)
C
C FURTHER WE COMPUTE TWO QUANTITIES
C    1.-SUME/SUM IS THE FRACTION OF B-W INSIDE GENERATED MASS RANGE
C    SUM IS THE TOTAL BW INTEGRAL. (ASSUMED TO BE PI=3.14 IF
C    THE WIDTH IS 0.) SO WE RENORMALIZE THE XSECTION BY PI/SUM.
C    SIG IS THE 2G X-SECTION INTEGRAL=(DN/DTHETA)/(MASS**3)
C
      IF(MODE2G.NE.3)GOTO 98
C IF RESONANCE WIDTH IS LOW AND THERE IS NO DAUGHTER WITH A FINITE
C WIDTH, THEN WE ONLY NEED TO SET NORMALIZATION.
      IF(WMRS2G.GT.0.0001)GOTO 87
      GGAREA=GGAREA/(XMRS2G**3)
      GOTO 98
  87  CONTINUE
 94   CONTINUE
C SET UP INTEGRATION STEPS. WE INTEGRATE OVER THREE SEPARATE
C MASS REGIONS: (1) THRESHOLD TO LOW END OF GENERATED REGION,
C (2) UPPER END OF GENERATED REGION TO BEAM ENERGY, AND
C (3) FINALLY THE INTEGRATION OVER THE GENERATED REGION IS DONE.
      RSTPSD=NSTPSD
      ISEQ=0
      SUM=0.
      GWVAR=0.
      NSTP=RSTPSD*(TBMI2G-TBMIMI)/PI
      IF(NSTP.LE.1)GOTO 99
      RSTP=NSTP
      RSTPI=(TBMI2G-TBMIMI)/(RSTP-1.)
      TEMI=TBMIMI
C HERE WE GO...TOP OF THE SEQUENCE LOOP
 84   CONTINUE
      PREVAL=0.
      PREVA1=0.
      SIG=0.
      DO 82 N=1,NSTP
      RN=N-1
      TEBW=RN*RSTPI+TEMI
      XM2=XMRES2+WMRS2G*TAN(TEBW)
      IF(XM2.LE.0.0001)GOTO 82
      XM=SQRT(XM2)
      IF(XM.LE.XMTHR)GOTO 82
      SI2=0.
      SU2=0.
      PR2VAL=0.
      PR2VA1=0.
 88   CONTINUE
      XNORM=1.
      FGVAL=FGRES
      CALL BREWIG(XM2,QR,JRES2G,XMRS2G,WMRS2G,X2GCH1,X2GCH2,FGVAL,XNORM)
 45   CONTINUE
      IF(ISEQ.EQ.2) GWVAR=XNORM/(XM**3)
      IF(N.EQ.1)GOTO 83
      SI2=SI2+0.5*(PR2VAL+GWVAR)
      SU2=SU2+0.5*(PR2VA1+XNORM)
 83   CONTINUE
      PR2VAL=GWVAR
      PR2VA1=XNORM
 89   CONTINUE
      SI2=GWVAR
      SU2=XNORM
 42   CONTINUE
C SUMMATION OF CROSS SECTION PIECES
      IF(N.EQ.1)GOTO 41
      SIG=SIG+0.5*(PREVAL+SI2)*RSTPI
      SUM=SUM+0.5*(PREVA1+SU2)*RSTPI
 41   CONTINUE
      PREVAL=SI2
      PREVA1=SU2
C SAVE PARTIAL INTEGRALS TO USE DURING EVENT GENERATION
      XSINT(N)=SIG
 82   CONTINUE
      IF(NSTP.NE.1)GOTO 43
      SIG=SI2
      SUM=SU2
      XSINT(1)=SIG
 43   CONTINUE
C DECIDE WHICH REGION TO INTEGRATE NEXT
      IF(ISEQ.EQ.1)GOTO 85
      IF(ISEQ.EQ.2)GOTO 86
 99   CONTINUE
C SET UP REGION ABOVE GENERATION GAP
      ISEQ=1
      NSTP=RSTPSD*(TBMAMA-TBMA2G)/PI
      IF(NSTP.LE.1)GOTO 85
      RSTP=NSTP
      RSTPI=(TBMAMA-TBMA2G)/(RSTP-1.)
      TEMI=TBMA2G
      GOTO 84
  85  CONTINUE
C SET UP GENERATION GAP
      SUME=SUM
      ISEQ=2
      NSTP=NSTPSD
      RSTP=NSTP
      RSTPI=D2GW/(RSTP-1.)
      TEMI=TBMI2G
      GOTO 84
  86  CONTINUE
C ALL DONE...RECOMPUTE NORMALIZATION PARAMETER
      GGAREA = SIG*YLTH2G*(TBMAMA - TBMIMI)/SUM
C
 98   CONTINUE
C
C HERE WE COMPUTE MAXIMUM EPA WEIGHT. BRANCH IS ON LEVEL OF TAGGING
C
      IF(EPAMAX.GT.0)GOTO 669
      PRINT *,'     ESTIMATING MAXIMUM WEIGHT FOR ==> '
CTCJ  7-16-90  BOOST THE LOOP TO GET A BETTER ESTIMATE
      NLOOP = 400
      IF(MODE2G .EQ. 5)NLOOP = 100
      DO 90 I=1,NLOOP
        CALL GGGEN(PRTEPA)
        OK2G = I
        IF(MODE2G .EQ. 5)PRINT *,' Number OK2G so far',OK2G
 90   CONTINUE
      EPAMAX = 1.5*EPAMAX
      PRTEPA = .TRUE.
      PRINT *,'     INITIAL ESTIMATE OF MAXIMUM WEIGHT = ',EPAMAX
      CALL GGACUM(6)
      CALL GGREST
 669  CONTINUE
C
C*****************************************************
C INITIALIZE NORMALIZATION AND COMPUTE INTEGRAL TABLES FOR USE
C DURING EVENT GENERATION.
C*****************************************************
C
       TRY2G  = 0.
       OK2G   = 0.
       NEPAUP = 0
C      EPAUPS = 0.0
C      ITERS  = 0
       WSUM   = 0.0D0+00
       WSUMSQ = 0.0D0+00
C
C**********************************************
C PRINT SUMMARY OF USER SELECTIONS
C**********************************************
C
      IF(MODE2G.EQ.0) WRITE(6,190) EMN2G,EMX2G,X2G0
  190 FORMAT(1H0,24X,'PRODUCTION OF GAMMA-GAMMA CMS.'/
     +     25X,'MINIMUM MASS = ',F7.4,' GEV.'/
     +     25X,'MAXIMUM MASS = ',F7.4,' GEV.'/
     +     25X,'NORMALIZED WITH CONSTANT SIGMA GG->X = ',E12.4,' NB.'/
     +     25X,'NO GAMMA-GAMMA INTERACTION REQUESTED.')
C
      IF(MODE2G.EQ.1)
     + WRITE(6,200) PAIR2G,CHAF(KCRES),EMN2G,EMX2G,COS2GX
 200  FORMAT(1H0,24X,'PAIR PRODUCTION OF ',F7.4,
     +  ' GEV POINT ',A8,' FERMION PAIRS.'/
     +     25X, 'MINIMUM MASS = ',F7.4,' GEV.'/
     +     25X, 'MAXIMUM MASS = ',F7.4,' GEV.'/
     +     25X, 'MAXIMUM CMS PRODUCTION COSINE = ',F7.4)
C
      IF(MODE2G.EQ.2)
     + WRITE(6,210) PAIR2G,CHAF(KFRES),EMN2G,EMX2G,COS2GX
 210  FORMAT(1H0,24X,'PAIR PRODUCTION OF ',F7.4,
     +  ' GEV POINT ',A8,' BOSON PAIRS.'/
     +     25X, 'MINIMUM MASS = ',F7.4,' GEV.'/
     +     25X, 'MAXIMUM MASS = ',F7.4,' GEV.'/
     +     25X, 'MAXIMUM CMS PRODUCTION COSINE = ',F7.4)
C
      IF(MODE2G.NE.3)GOTO 350
      WRITE(6,300) CHAF(KFRES),XMRS2G,PMAS(KCRES,2),
     +JRES2G,LHRS2G,JPAR2G,COS2GX,BWMG2G
  300 FORMAT(1H0,24X,'PRODUCTION OF  ',A8,'(',F9.4,')',' RESONANCE.'/
     +     25X,'RESONANCE WIDTH =',F9.4/
     +     25X,'SPIN =',I3,' HELICITY =',I3,' PARITY =',I3/
     +     25X,'MAXIMUM CMS DECAY COSINE (PARENT DECAY) =',F7.4/
     +     25X,'NUMBER OF WIDTHS OF BREIT-WIGNER GENERATED = ',F9.4/
     +     25X,'FRACTION OF BREIT-WIGNER GENERATED = ',F5.3/ )
      IF(DOFRAG)THEN
       WRITE(6,303) CHAF(KFRES)
  303  FORMAT(1H0,30X,A8,'--> LUND PROGRAM DECAY SCHEME')
      ENDIF
  350 CONTINUE
C
        IF(MODE2G.EQ.5)THEN
        WRITE(6,400)
 400    FORMAT(1H0,24X,'MULTIHADRON PRODUCTION.')
          WRITE(6,500) EXPSL,PTBRK
 500      FORMAT(1H0,4X,'QUARK JET PRODUCTION; LUND JETS'/
     +    5X,'VALUE FOR SQRT(<PT>) USED IN VDM= ',F7.4/
     +    5X,'INITIAL SETTING OF PTMIN OF 3JET MODEL = ',F7.4)
          WRITE(6,501) IRES2G,COS2GX,EMN2G
 501      FORMAT(1H0,4X,'MAP OF QUARK TYPES = ',I6/
     +    5X,'MAXIMUM COSINE OF Q-QBAR IN GG CMS = ',F7.4/
     +    5X,'MINIMUM MASS = ',F6.3,' GEV.')
        ENDIF
C
  550 CONTINUE
C
      IF(NTAG2G.EQ.0) WRITE(6,1000)
 1000 FORMAT(1H0,4X,'NO TAGGING REQUESTED.')
      IF(NTAG2G.EQ.1) WRITE(6,1001) TAGMN,TAGMX,ANGUNT
 1001 FORMAT(1H0,4X,'SINGLE TAGGING BETWEEN ',F8.6,' AND ',F8.6,
     +     ' RADIANS.',/,
     +5X,' ANTI-TAGGING AT ',F8.6,' RADIANS.')
      IF(NTAG2G.EQ.2) WRITE(6,1002) TAGMN,TAGMX,DBTGNM,DBTGMX
 1002 FORMAT(1H0,4X,'DOUBLE TAGGING BETWEEN ',F8.6,' AND ',F8.6,
     +     ' RADIANS ON ARM 1 AND ',/,
     +5X,'TAGGING BETWEEN ',F8.6,' AND ',F8.6,
     +     ' RADIANS ON ARM 2.',/,
     +5X,'CHARGE OF TAG IS SYMMETRIZED SO BE CAREFUL ',/,
     +5X,'IF YOU ARE USING THIS TO "SINGLE TAG"')
C
      WRITE(6,1005) EPAMAX
 1005 FORMAT(1H0,4X,'INITIAL ESTIMATE OF MAXIMUM MONTE CARLO WEIGHT =',
     +     E15.5)
C
      WRITE(6,2000)
 2000 FORMAT(//,1H0,24X,'GGDEPA INITIALIZATION COMPLETE.'//1X)
      RETURN
      END
