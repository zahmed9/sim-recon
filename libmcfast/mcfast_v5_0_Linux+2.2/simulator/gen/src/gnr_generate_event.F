      subroutine gnr_generate_event

c  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
c   Generate an event internally (fill up HEPEVT common). Features:
c
c   1. Multiplicity fixed or generated by Poisson
c   2. Probability of each particle type specified by user
c   3. ptmin  < pt  < ptmax    generated as exp(-slope*pt)
c   4. etamin < eta < etamax   generated flat
c   5. phimin < phi < phimax   generated flat
c   6. Vertex generated according to user specified position and sigmas
c   7. usr_generate_event called at the end for user control
c  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

      implicit none

#include "const.inc"
#include "stdhep.inc"
#include "vtxhep.inc"
#include "mcp_summary.inc"
#include "gnr_params.inc"

c     Externals
      real     rann, get_gauss
      external rann, get_gauss

c     Local variables
      DFLOAT r, costh, sinth, pt, eta, phi, temp, mass
      DFLOAT cum_prob(gnr_maxtype)
      DFLOAT conv
      integer error, i, ihep, n, id
      logical linit

      data linit/.TRUE./
      save linit
      save cum_prob

c  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>

c     Generate cumulative probability table of track types
c     Need this to select particle types with correct probability
      if(linit) then
        linit = .FALSE.
        call vzero(cum_prob, gnr_maxtype)
        cum_prob(1) = gnr_type_probs(1)
        do i=2,gnr_ntype
          cum_prob(i) = cum_prob(i-1) + gnr_type_probs(i)
        enddo
        do i=1,gnr_ntype
          cum_prob(i) = cum_prob(i) / cum_prob(gnr_ntype)
        enddo
      endif

c     Generate multiplicity ... force nhep to be at least 1
c     Either fix the multiplicity or use a Poisson distribution
      if(gnr_fix_mult) then
        nhep = max(nint(gnr_avetrk), 1)
      else if(gnr_avetrk .le. 0.) then
        nhep = 1
      else
 5      call poissn(gnr_avetrk, nhep, error)
        if(nhep .eq. 0) goto 5
      endif

c     Loop over tracks
c     Generate particle type according to probabilities
      do ihep=1,nhep
        r = rann(0)
        n = 0
        
 10     n = n+1
        if(n .ge. gnr_ntype) goto 30
        if(r .gt. cum_prob(n)) goto 10

 30     id = gnr_type_list(n)
        mass = gnr_type_masses(n)

c     pt is generated according to exp(-slope*pt)
c     eta, phi are generated flat
        r = rann(0)
        if(gnr_slope .ne. 0.) then
          pt = gnr_ptmin - log(1 - r*(1-exp(-gnr_slope
     *             * (gnr_ptmax-gnr_ptmin)) )) / gnr_slope
        else
          pt = gnr_ptmin + (gnr_ptmax - gnr_ptmin) * r
        endif

        r = rann(0)
        eta = gnr_etamin + (gnr_etamax - gnr_etamin) * r

        r = rann(0)
        phi = gnr_phimin + (gnr_phimax - gnr_phimin) * r

        temp = exp(-2.*eta)
        costh = (1. - temp) / (1. + temp)
        sinth = dsqrt(1. - costh**2)
        sinth = dmax1(1.d-6, sinth)

        phep(1,ihep) = pt * cos(phi)
        phep(2,ihep) = pt * sin(phi)
        phep(3,ihep) = pt * (costh/sinth)
        phep(4,ihep) = dsqrt(pt**2 + phep(3,ihep)**2 + mass**2)
        phep(5,ihep) = mass

c     Vertex in mm
c     c*time distributed same as z but uncorrelated
        conv = 1000. / unit_meter
        do i=1,3
          vhep(i,ihep) = gnr_vtx(i) * conv + 
     >          gnr_dvtx(i) * get_gauss(0) * conv
        enddo
        vhep(4,ihep) = gnr_dvtx(3) * get_gauss(0) * conv

        idhep(ihep) = id     !Particle id
        isthep(ihep) = 1     !Stable
        jmulti(ihep) = 1     !Interaction number

      enddo
      nevhep = mcp_all.event
      nmulti = 1

      call usr_generate_event

      return
      end

c $Id$
c $Log$
c Revision 1.1  2000/06/19 19:59:19  eugenio
c Initial revision
c
c Revision 1.4  1997/04/30 22:13:20  bphyslib
c fix so it will compile on OSF1
c
c Revision 1.3  1997/04/30  16:40:53  yarba_j
c real -> DFLOAT
c
c Revision 1.2  1997/04/04  18:07:47  garren
c add hooks to initialize user trigger code
c
