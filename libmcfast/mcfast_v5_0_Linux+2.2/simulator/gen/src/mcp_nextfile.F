      subroutine mcp_nextfile(type, status)

c  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
c   Get the next file if we are reading input from StdHep
c
c  Input:
c  type       integer variable
c             1 ==> open signal file (file 1)
c             2 ==> open background file (file 2)
c
c  Output:
c  status     integer variable
c             0 ==> All ok
c             1 ==> No more files (end of data)
c             2 ==> Error opening file
c  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
c  modified 11/14/94 ASB added MCFIO format

      implicit none

#include "dataset.inc"
#include "mcp_files.inc"
#include "mcp_summary.inc"
#include "mcp_luns.inc"
#include "mcfio.inc"
#include "mcp_mcfio.inc"
#include "mcp_ioparam.inc"
#include "stdlun.inc"

c     Externals
      integer  cmd_lenstr
      external cmd_lenstr

c     Calling arguments
      integer type, status

c     Local variables
      integer leng, error
      record /dataset/ datfile
c  >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
c     Signal file
      if(type .eq. 1) then
        call dtf_getnext(datfile, 1, error)
        if(error .gt. 0) goto 9999

        if(mcp_filetype(1) .eq. OLD_STDHEP) then
          open(unit=lnhrdm(1),file=datfile.file,status='old',err=9901,
     *       form='unformatted')
        else if(mcp_filetype(1) .eq. MCF_IO_STDHEP .or.
     1          mcp_filetype(1) .eq. MCF_IO_MCFAST) then
	  ostr_in(1) = mcfio_OpenReadDirect(datfile.file) 
          if (ostr_in(1) .eq. -1) goto 9901          
        endif

        mcp_openfile(1) = .TRUE.
        mcp_infiles(1) = mcp_infiles(1) + 1

        leng = max(1, cmd_lenstr(datfile.file) )
        write(mcp_llpt, 5004) mcp_infiles(1), datfile.file(:leng)
        write(6, 5004) mcp_infiles(1), datfile.file(:leng)
5004    format(' Opening signal data file #', i4, 2x, '"',a,'"')

        mcp_all.event_file = 0
        mcp_fltr.event_file = 0
        mcp_trig.event_file = 0

c     Background file
      else
        call dtf_getnext(datfile, 2, error)
        if(error .gt. 0) goto 9999
        
        if(mcp_filetype(2) .eq. OLD_STDHEP) then
        open(unit=lnhrdm(2),file=datfile.file,status='old',err=9901,
     *       form='unformatted')
        else if(mcp_filetype(2) .eq. MCF_IO_STDHEP .or.
     1          mcp_filetype(2) .eq. MCF_IO_MCFAST) then
	  ostr_in(2) = mcfio_OpenReadDirect(datfile.file) 
          if (ostr_in(2) .eq. -1) goto 9901          
        endif

        mcp_openfile(2) = .TRUE.
        mcp_infiles(2) = mcp_infiles(2) + 1

        leng = max(1, cmd_lenstr(datfile.file) )
        write(mcp_llpt, 5005) mcp_infiles(1), datfile.file(:leng)
        write(6, 5005) mcp_infiles(1), datfile.file(:leng)
 5005   format(' Opening background data file #', i4, 2x, '"',a,'"')

        mcp_all.event_file = 0
        mcp_fltr.event_file = 0
        mcp_trig.event_file = 0

      endif

c     Normal exit
 8000 status = 0
      return

c     Error opening file
 9901 status = -2
      leng = max(1, cmd_lenstr(datfile.file) )
      write(mcp_llpt, 5002) datfile.file(:leng)
      write(6, 5002) datfile.file(:leng)
5002  format(' mcp_nextfile: Error opening file: "',a,'"')
      stop

c     End of files
 9999 status = -1
      return
      end

c $Id$
c $Log$
c Revision 1.1  2000/06/19 19:59:20  eugenio
c Initial revision
c
c Revision 1.3  1997/08/15 17:02:24  garren
c read back in event files generated by MCFast
c
c Revision 1.2  1997/04/04  18:07:53  garren
c add hooks to initialize user trigger code
c
