/*
 * hddm_s.hpp - DO NOT EDIT THIS FILE
 *
 * This file was generated automatically by hddm-cpp from the file
 * event.xml
 * This header file defines the c++ structures that hold the data
 * described in the data model (from event.xml). 
 *
 * The hddm data model tool set was written by
 * Richard Jones, University of Connecticut.
 *
 *
 * The C++ container system was written by
 * David Lawrence, Jefferson Lab.
 *
 * For more information see the following web site
 *
 * http://zeus.phys.uconn.edu/halld/datamodel/doc
 *
 */

#include "hddm_s.h"
#include "DContainer.h"

#ifndef _HDDM_HPP_
#define _HDDM_HPP_
//------------- s_Products_c --------------

class s_Products_c:public DContainer
{
	public:
		s_Products_c(void):DContainer((void**)&s_Product, sizeof(s_Product_t), "s_Product"){}
   	s_Product_t *s_Product;
};
//-------------------------------------------
//------------- s_Vertices_c --------------

class s_Vertices_c:public DContainer
{
	public:
		s_Vertices_c(void):DContainer((void**)&s_Vertex, sizeof(s_Vertex_t), "s_Vertex"){}
   	s_Vertex_t *s_Vertex;
};
//-------------------------------------------
//------------- s_Reactions_c --------------

class s_Reactions_c:public DContainer
{
	public:
		s_Reactions_c(void):DContainer((void**)&s_Reaction, sizeof(s_Reaction_t), "s_Reaction"){}
   	s_Reaction_t *s_Reaction;
};
//-------------------------------------------
//------------- s_Bands_c --------------

class s_Bands_c:public DContainer
{
	public:
		s_Bands_c(void):DContainer((void**)&s_Band, sizeof(s_Band_t), "s_Band"){}
   	s_Band_t *s_Band;
};
//-------------------------------------------
//------------- s_CathodeCyls_c --------------

class s_CathodeCyls_c:public DContainer
{
	public:
		s_CathodeCyls_c(void):DContainer((void**)&s_CathodeCyl, sizeof(s_CathodeCyl_t), "s_CathodeCyl"){}
   	s_CathodeCyl_t *s_CathodeCyl;
};
//-------------------------------------------
//------------- s_Hits_c --------------

class s_Hits_c:public DContainer
{
	public:
		s_Hits_c(void):DContainer((void**)&s_Hit, sizeof(s_Hit_t), "s_Hit"){}
   	s_Hit_t *s_Hit;
};
//-------------------------------------------
//------------- s_CdcPoints_c --------------

class s_CdcPoints_c:public DContainer
{
	public:
		s_CdcPoints_c(void):DContainer((void**)&s_CdcPoint, sizeof(s_CdcPoint_t), "s_CdcPoint"){}
   	s_CdcPoint_t *s_CdcPoint;
};
//-------------------------------------------
//------------- s_Straws_c --------------

class s_Straws_c:public DContainer
{
	public:
		s_Straws_c(void):DContainer((void**)&s_Straw, sizeof(s_Straw_t), "s_Straw"){}
   	s_Straw_t *s_Straw;
};
//-------------------------------------------
//------------- s_Rings_c --------------

class s_Rings_c:public DContainer
{
	public:
		s_Rings_c(void):DContainer((void**)&s_Ring, sizeof(s_Ring_t), "s_Ring"){}
   	s_Ring_t *s_Ring;
};
//-------------------------------------------
//------------- s_Strips_c --------------

class s_Strips_c:public DContainer
{
	public:
		s_Strips_c(void):DContainer((void**)&s_Strip, sizeof(s_Strip_t), "s_Strip"){}
   	s_Strip_t *s_Strip;
};
//-------------------------------------------
//------------- s_CathodePlanes_c --------------

class s_CathodePlanes_c:public DContainer
{
	public:
		s_CathodePlanes_c(void):DContainer((void**)&s_CathodePlane, sizeof(s_CathodePlane_t), "s_CathodePlane"){}
   	s_CathodePlane_t *s_CathodePlane;
};
//-------------------------------------------
//------------- s_FdcPoints_c --------------

class s_FdcPoints_c:public DContainer
{
	public:
		s_FdcPoints_c(void):DContainer((void**)&s_FdcPoint, sizeof(s_FdcPoint_t), "s_FdcPoint"){}
   	s_FdcPoint_t *s_FdcPoint;
};
//-------------------------------------------
//------------- s_Wires_c --------------

class s_Wires_c:public DContainer
{
	public:
		s_Wires_c(void):DContainer((void**)&s_Wire, sizeof(s_Wire_t), "s_Wire"){}
   	s_Wire_t *s_Wire;
};
//-------------------------------------------
//------------- s_AnodePlanes_c --------------

class s_AnodePlanes_c:public DContainer
{
	public:
		s_AnodePlanes_c(void):DContainer((void**)&s_AnodePlane, sizeof(s_AnodePlane_t), "s_AnodePlane"){}
   	s_AnodePlane_t *s_AnodePlane;
};
//-------------------------------------------
//------------- s_Chambers_c --------------

class s_Chambers_c:public DContainer
{
	public:
		s_Chambers_c(void):DContainer((void**)&s_Chamber, sizeof(s_Chamber_t), "s_Chamber"){}
   	s_Chamber_t *s_Chamber;
};
//-------------------------------------------
//------------- s_Paddles_c --------------

class s_Paddles_c:public DContainer
{
	public:
		s_Paddles_c(void):DContainer((void**)&s_Paddle, sizeof(s_Paddle_t), "s_Paddle"){}
   	s_Paddle_t *s_Paddle;
};
//-------------------------------------------
//------------- s_StartPoints_c --------------

class s_StartPoints_c:public DContainer
{
	public:
		s_StartPoints_c(void):DContainer((void**)&s_StartPoint, sizeof(s_StartPoint_t), "s_StartPoint"){}
   	s_StartPoint_t *s_StartPoint;
};
//-------------------------------------------
//------------- s_Showers_c --------------

class s_Showers_c:public DContainer
{
	public:
		s_Showers_c(void):DContainer((void**)&s_Shower, sizeof(s_Shower_t), "s_Shower"){}
   	s_Shower_t *s_Shower;
};
//-------------------------------------------
//------------- s_Modules_c --------------

class s_Modules_c:public DContainer
{
	public:
		s_Modules_c(void):DContainer((void**)&s_Module, sizeof(s_Module_t), "s_Module"){}
   	s_Module_t *s_Module;
};
//-------------------------------------------
//------------- s_BarrelShowers_c --------------

class s_BarrelShowers_c:public DContainer
{
	public:
		s_BarrelShowers_c(void):DContainer((void**)&s_BarrelShower, sizeof(s_BarrelShower_t), "s_BarrelShower"){}
   	s_BarrelShower_t *s_BarrelShower;
};
//-------------------------------------------
//------------- s_Flashes_c --------------

class s_Flashes_c:public DContainer
{
	public:
		s_Flashes_c(void):DContainer((void**)&s_Flash, sizeof(s_Flash_t), "s_Flash"){}
   	s_Flash_t *s_Flash;
};
//-------------------------------------------
//------------- s_Sections_c --------------

class s_Sections_c:public DContainer
{
	public:
		s_Sections_c(void):DContainer((void**)&s_Section, sizeof(s_Section_t), "s_Section"){}
   	s_Section_t *s_Section;
};
//-------------------------------------------
//------------- s_Slabs_c --------------

class s_Slabs_c:public DContainer
{
	public:
		s_Slabs_c(void):DContainer((void**)&s_Slab, sizeof(s_Slab_t), "s_Slab"){}
   	s_Slab_t *s_Slab;
};
//-------------------------------------------
//------------- s_TofPoints_c --------------

class s_TofPoints_c:public DContainer
{
	public:
		s_TofPoints_c(void):DContainer((void**)&s_TofPoint, sizeof(s_TofPoint_t), "s_TofPoint"){}
   	s_TofPoint_t *s_TofPoint;
};
//-------------------------------------------
//------------- s_Columns_c --------------

class s_Columns_c:public DContainer
{
	public:
		s_Columns_c(void):DContainer((void**)&s_Column, sizeof(s_Column_t), "s_Column"){}
   	s_Column_t *s_Column;
};
//-------------------------------------------
//------------- s_Rows_c --------------

class s_Rows_c:public DContainer
{
	public:
		s_Rows_c(void):DContainer((void**)&s_Row, sizeof(s_Row_t), "s_Row"){}
   	s_Row_t *s_Row;
};
//-------------------------------------------
//------------- s_ForwardShowers_c --------------

class s_ForwardShowers_c:public DContainer
{
	public:
		s_ForwardShowers_c(void):DContainer((void**)&s_ForwardShower, sizeof(s_ForwardShower_t), "s_ForwardShower"){}
   	s_ForwardShower_t *s_ForwardShower;
};
//-------------------------------------------
//------------- s_PhysicsEvents_c --------------

class s_PhysicsEvents_c:public DContainer
{
	public:
		s_PhysicsEvents_c(void):DContainer((void**)&s_PhysicsEvent, sizeof(s_PhysicsEvent_t), "s_PhysicsEvent"){}
   	s_PhysicsEvent_t *s_PhysicsEvent;
};
//-------------------------------------------


//----------------------------------------------------------------------------
//------------------------------- hddm_containers_t -------------------------------
//----------------------------------------------------------------------------
typedef struct{

	/// This struct should consist ONLY of class pointers derived from DContainer
	
	s_Products_c *Products;
	s_Vertices_c *Vertices;
	s_Reactions_c *Reactions;
	s_Bands_c *Bands;
	s_CathodeCyls_c *CathodeCyls;
	s_Hits_c *Hits;
	s_CdcPoints_c *CdcPoints;
	s_Straws_c *Straws;
	s_Rings_c *Rings;
	s_Strips_c *Strips;
	s_CathodePlanes_c *CathodePlanes;
	s_FdcPoints_c *FdcPoints;
	s_Wires_c *Wires;
	s_AnodePlanes_c *AnodePlanes;
	s_Chambers_c *Chambers;
	s_Paddles_c *Paddles;
	s_StartPoints_c *StartPoints;
	s_Showers_c *Showers;
	s_Modules_c *Modules;
	s_BarrelShowers_c *BarrelShowers;
	s_Flashes_c *Flashes;
	s_Sections_c *Sections;
	s_Slabs_c *Slabs;
	s_TofPoints_c *TofPoints;
	s_Columns_c *Columns;
	s_Rows_c *Rows;
	s_ForwardShowers_c *ForwardShowers;
	s_PhysicsEvents_c *PhysicsEvents;
}s_hddm_containers_t;

// in HDDM/hddm_containers.cc
derror_t init_hddm_containers(s_hddm_containers_t *hddm);
derror_t delete_hddm_containers(s_hddm_containers_t *hddm);

#endif // _HDDM_HPP_

