#!/usr/bin/env perl

$HALLD_HOME = $ENV{"HALLD_HOME"};
$JILSCRIPTS = "$HALLD_HOME/src/BMS";
$INCDIR = "$HALLD_HOME/src/libraries/include";

# Read in external list of header files we should include
open(FILE,"headers");
@headers = <FILE>;
chomp(@headers);
close(FILE);

# Get list of files that have a class based on DObject
foreach $file (`ls $INCDIR/*.h`){
	chomp($file);
	open(FILE, "$file");
	my $keep = "false";
	foreach (<FILE>){
		if(/\:*public\s+DObject/){
			$keep = "true";
			last;
		}
	}
	
	if($keep eq "true"){
		$file =~ s/$INCDIR\///;
		push(@headers, $file);
	}
}

# Copy all header files into a local directory, prepending
# #pragma interface at the top. Also, create a dummy "main"
# file to compile into an executable with debugging symbols
`rm -rf tmpinc`;
`mkdir tmpinc`;
open(FILE, ">tmp.cc");
open(CLASSES_H, ">tmp_classes.h");
print CLASSES_H "// \$Id\$\n";
print CLASSES_H "//\n// This file is auto-generated for use with JILIO\n//\n\n";
foreach $file (@headers){
	`echo "#pragma interface" > tmpinc/$file`;
	`cat $INCDIR/$file >> tmpinc/$file`;
	
	print FILE "#pragma implementation \"$file\"\n";
	print FILE "#include \"$file\"\n\n";
	print CLASSES_H "#include \"$file\"\n";
}
print FILE "\nint main(int narg, char *argv){return 0;}\n\n";
close(FILE);

# Add class declarations
#open(FILE,"classes");
#@classes = <FILE>;
#chomp(@classes);
#close(FILE);
#foreach $class (@classes){
#	print CLASSES_H "class $class;\n";
#}
close(CLASSES_H);

# Create the dummy executable with debugging symbols
$ROOT_CFLAGS = `root-config --cflags`;
chomp($ROOT_CFLAGS);
print `g++ -g -Itmpinc -I$INCDIR -I$INCDIR/../../include $ROOT_CFLAGS tmp.cc`;

# Create XML file from dummy executable
$cmd = "$JILSCRIPTS/jil_exe2xml -classes=classes a.out";
print "$cmd\n";
print `$cmd`;

# Compare the new XML file with the old
my $changed = "false";
if(-e "hd_serializers.xml"){
	# read in both files
	open(NEW, "a.out.xml");
	@new = <NEW>;
	close(NEW);
	open(OLD, "hd_serializers.xml");
	@old = <OLD>;
	close(OLD);
	
	# If file sizes are different, then we already know they're different
	if(@new != @old){$changed = "true";}
	
	# loop over lines from the files comparing each. If the any
	# (other than the first or last lines) are different, then
	# set the$changed flag.
	for($i=1 ; $i<@new; $i++){
		if($new[$i] ne $old[$i]){$changed = "true";}
	}
}else{
	$changed = "true";
}

# Replace old file with new if changes were found.
if($changed eq "true"){
	print "\nChanges found. Updating hd_serializers.xml file.\n\n";
	$cmd = "mv a.out.xml hd_serializers.xml";
	print "$cmd\n";
	print `$cmd`;
	$cmd = "mv tmp_classes.h hd_classes.h";
	print "$cmd\n";
	print `$cmd`;
}else{
	print "\nNo changes found. Serializers are already up-to-date\n\n";
}

# Clean up
$cmd = "rm -rf tmpinc tmp.cc a.out* tmp_classes.h";
print "$cmd\n";
print `$cmd`;
