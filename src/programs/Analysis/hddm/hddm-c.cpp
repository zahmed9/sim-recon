/*
 *  hddm-c :	tool that reads in a HDDM document (Hall D Data Model)
 *		and writes a c header file that embodies the model in
 *		c structures.  It also generates an input/output pair
 *		of functions to translate the model between the memory
 *		representation and a default binary representation that
 *		is suitable for passing over a pipe or storing on disk.
 *
 *  Version 1.2 - Richard Jones, December 2005.
 *  - Updated code to use STL strings and vectors instead of old c-style
 *    pre-allocated arrays and strXXX functions.
 *  - Moved functions into classes grouped by function for better clarity.
 *
 *  Version 1.1 - Richard Jones, September 2003.
 *  - Updated code to work with the new DOM-2 implementation Xerces-c
 *    from apache.org.  Significant changes have taken place in the API
 *    since DOM-1.
 *  - Added support for new types "long" (int64), "string" (char arrays of
 *    arbitrary length), and "anyURI" (special case of string).
 *  - Switched from native encoding to the use of the XDR library to make
 *    hddm files machine-independent.
 *
 *  Original version - Richard Jones, May 25 2001.
 *
 *
 *  Programmer's Notes:
 *  -------------------
 * 1. The HDDM specification describes data files using xml.  For
 *    information about the contents and structure of HDDM documents
 *    see the web page index.html that describes the data model.
 *
 * 2. Access by hddm-c to the xml source is through the industry-
 *    standard Document Object Model (DOM) interface.
 *
 * 3. The code has been tested with the xerces-c DOM implementation from
 *    Apache, and is intended to be used with the xerces-c library.
 *
 * 4. Output is sent to <filename>.h and <filename>.c where <filename> is
 *    by default "hddm" and can be changed with the -o option.
 *
 * 5. As a by-product of using the DOM parser to access the xml source,
 *    hddm-c verifies the source for well-formedness.  Therefore it may
 *    also be used to check the xml data model document.
 *
 *
 *  Implementation Notes:
 *  ---------------------
 * 1. The binary stream consists of the hddm data model in the form
 *    of a well-formed xml header, followed by binary data.
 *
 * 2. The binary data consist of a sequence of event records, which are
 *    repetitions of the basic data model in a serial representation.
 *
 * 3. Each element is output to the stream in the order it appears in
 *    the data model, prefixed by an exclusive byte count.
 *
 * 4. Any c application compiled with the hddm header file that is
 *    generated by hddm-c is able to read any hddm binary file that
 *    was written using the same hddm class, ie. the <HDDM class="x">
 *    document tags must be a non-colliding set (see matching rules).
 */

#define MAX_POPLIST_LENGTH 99

#include "XString.hpp"
#include "XParsers.hpp"

#include <assert.h>
#include <ctype.h>
#include <stdlib.h>
#include <stdio.h>

#include <string>
#include <vector>
#include <fstream>

#define X(XString) XString.unicode_str()
#define S(XString) XString.c_str()

XString classPrefix;

void usage()
{
   cerr << "\nUsage:\n"
        << "    hddm-c [-v | -o <filename>] {HDDM file}\n\n"
        << "Options:\n"
        <<  "    -v			validate only\n"
        <<  "    -o <filename>	write to <filename>.h"
        << endl;
}

class XtString : public XString
{
/* XString class with a few extra methods for creating type
 * strings that are useful in creating c structures
 */
 public:
   XtString() {};
   XtString(const char* s): XString(s) {};
   XtString(const XMLCh* p): XString(p) {};
   XtString(const std::string& s): XString(s) {};
   XtString(const XString& x): XString(x) {};
   XtString(const XtString& t): XString((XString&)t) {};

   XtString& plural();
   XtString& simpleStructType();
   XtString& listStructType();
};

class CodeBuilder
{
/* The methods in this class are used to write the c code that
 * implements the hddm structures i/o library.
 */
 public:
   ofstream hFile;
   ofstream cFile;

   CodeBuilder() {};
   ~CodeBuilder() {};

   void checkConsistency(DOMElement* el, DOMElement* elref);
   void writeHeader(DOMElement* el);
   void constructGroup(DOMElement* el);
   void constructMakeFuncs();
   void constructUnpackers();
   void constructReadFunc(DOMElement* topEl);
   void constructPackers();
   void constructFlushFunc(DOMElement* el);
   void writeMatcher();
   void constructOpenFunc(DOMElement* el);
   void constructInitFunc(DOMElement* el);
   void constructCloseFunc(DOMElement* el);
   void constructDocument(DOMElement* el);

 private:
   std::vector<DOMElement*> tagList;
};


int main(int argC, char* argV[])
{
   try
   {
      XMLPlatformUtils::Initialize();
   }
   catch (const XMLException* toCatch)
   {
      XtString msg(toCatch->getMessage());
      cerr << "hddm-c: Error during initialization! :\n"
           << msg << endl;
      return 1;
   }

   if (argC < 2)
   {
      usage();
      return 1;
   }
   else if ((argC == 2) && (strcmp(argV[1], "-?") == 0))
   {
      usage();
      return 2;
   }

   XtString xmlFile;
   XtString hFilename;
   bool verifyOnly = false;
   int argInd;
   for (argInd = 1; argInd < argC; argInd++)
   {
      if (argV[argInd][0] != '-')
      {
         break;
      }
      if (strcmp(argV[argInd],"-v") == 0)
      {
         verifyOnly = true;
      }
      else if (strcmp(argV[argInd],"-o") == 0)
      {
         hFilename = XtString(argV[++argInd]);
      }
      else
      {
         cerr << "Unknown option \'" << argV[argInd]
              << "\', ignoring it\n" << endl;
      }
   }

   if (argInd != argC - 1)
   {
      usage();
      return 1;
   }
   xmlFile = XtString(argV[argInd]);

#if defined OLD_STYLE_XERCES_PARSER
   DOMDocument* document = parseInputDocument(xmlFile.c_str(),false);
#else
   DOMDocument* document = buildDOMDocument(xmlFile.c_str(),false);
#endif
   if (document == 0)
   {
      cerr << "hddm-c : Error parsing HDDM document, "
           << "cannot continue" << endl;
      return 1;
   }

   DOMElement* rootEl = document->getDocumentElement();
   XtString rootS(rootEl->getTagName());
   if (rootS != "HDDM")
   {
      cerr << "hddm-c error: root element of input document is "
           << "\"" << rootS << "\", expected \"HDDM\""
           << endl;
      return 1;
   }

   XtString classAttS("class");
   XtString classS(rootEl->getAttribute(X(classAttS)));
   classPrefix = classS;

   XtString hname;
   if (verifyOnly)
   {
      hname = "/dev/null";
   }
   else if (hFilename.size())
   {
      hname = hFilename + ".h";
   }
   else
   {
      hname = "hddm_" + classPrefix + ".h";
   }

   CodeBuilder builder;
   builder.hFile.open(hname.c_str());
   if (! builder.hFile.is_open())
   {
      cerr << "hddm-c error: unable to open output file "
           << hname << endl;
      return 1;
   }

   XtString cname;
   if (verifyOnly)
   {
      cname = "/dev/null";
   }
   else if (hFilename.size())
   {
      cname = hFilename + ".c";
   }
   else
   {
      cname = "hddm_" + classPrefix + ".c";
   }

   builder.cFile.open(cname.c_str());
   if (! builder.cFile.is_open())
   {
      cerr << "hddm-c error: unable to open output file "
           << cname << endl;
      return 1;
   }

   builder.hFile 
         << "/*"						<< endl
	 << " * " << hname << " - DO NOT EDIT THIS FILE"	<< endl
	 << " *"						<< endl
	 << " * This file was generated automatically by hddm-c"
	 << " from the file"					<< endl
         << " * " << xmlFile					<< endl
         << " * This header file defines the c structures that"
	 << " hold the data"					<< endl
	 << " * described in the data model"
         << " (from " << xmlFile << "). "			<< endl
	 << " * Any program that needs access to the data"
         << " described in the model"				<< endl
         << " * can include this header file, and make use"
	 << " of the input/output"				<< endl
         << " * services provided in " << cname			<< endl
	 << " *"						<< endl
	 << " * The hddm data model tool set was written by"	<< endl
	 << " * Richard Jones, University of Connecticut."	<< endl
	 << " *"						<< endl
	 << " * For more information see the following web site"<< endl
	 << " *"						<< endl
	 << " * http://zeus.phys.uconn.edu/halld/datamodel/doc"	<< endl
	 << " *"						<< endl
	 << " */"						<< endl
	 							<< endl;

   builder.cFile
	 << "/*"						<< endl
	 << " * " << cname << " - DO NOT EDIT THIS FILE"	<< endl
	 << " *"						<< endl
	 << " * This file was generated automatically by hddm-c"
	 << " from the file"					<< endl
         << " * " << xmlFile					<< endl
         << " * This c file contains the i/o interface to"
         << " the c structures"					<< endl
	 << " * described in the data model"
         << " (from " << xmlFile << "). "			<< endl
	 << " * Any program that needs access to the data"
         << " described in the model"				<< endl
         << " * can compile this source file, and make use"
	 << " of the input/output"				<< endl
         << " * services provided."				<< endl
	 << " *"						<< endl
	 << " * The hddm data model tool set was written by"	<< endl
	 << " * Richard Jones, University of Connecticut."	<< endl
	 << " *"						<< endl
	 << " * For more information see the following web site"<< endl
	 << " *"						<< endl
	 << " * http://zeus.phys.uconn.edu/halld/datamodel/doc"	<< endl
	 << " */"						<< endl
								<< endl;

   builder.hFile
	 << "#include <stdlib.h>"				<< endl
	 << "#include <stdio.h>" 				<< endl
	 << "#include <rpc/rpc.h>" 				<< endl
	 << "#include <string.h>"				<< endl
	 << "#include <strings.h>"				<< endl
	 << "#include <particleType.h>"				<< endl
								<< endl
	 << "#define MALLOC(N,S) malloc(N)"			<< endl
	 << "#define FREE(P) free(P)"				<< endl;

   builder.cFile
	 << "int hddm_nullTarget=0;"				<< endl
         << "#define HDDM_NULL (void*)&hddm_nullTarget"         << endl
                                                                << endl
         << "#include \"" << hname << "\"" 			<< endl
								<< endl;
   builder.constructGroup(rootEl);

   builder.hFile						<< endl
	 << "#ifdef __cplusplus"				<< endl
	 << "extern \"C\" {"					<< endl
	 << "#endif"						<< endl;
   builder.constructMakeFuncs();
   builder.hFile						<< endl
	 << "#ifdef __cplusplus"				<< endl
	 << "}"							<< endl
	 << "#endif"						<< endl;

   builder.hFile 						<< endl
	 << "#ifndef " << classPrefix << "_DocumentString" 	<< endl
	 << "#define " << classPrefix << "_DocumentString" 	<< endl
         							<< endl
	 << "extern "
	 << "char HDDM_" << classPrefix << "_DocumentString[];"	<< endl
         							<< endl
         << "#ifdef INLINE_PREPEND_UNDERSCORES"			<< endl
         << "#define inline __inline"				<< endl
         << "#endif"						<< endl
								<< endl
	 << "#endif /* " << classPrefix << "_DocumentString */"	<< endl;

   builder.cFile						<< endl
	 << "char HDDM_" << classPrefix << "_DocumentString[]"
	 << " = "						<< endl;
   builder.constructDocument(rootEl);
   builder.cFile << ";"						<< endl;

   builder.hFile 						<< endl
	 << "#ifndef HDDM_STREAM_INPUT"				<< endl
	 << "#define HDDM_STREAM_INPUT -91"			<< endl
	 << "#define HDDM_STREAM_OUTPUT -92"			<< endl
           							<< endl
	 << "struct popNode_s {"				<< endl
         << "   void* (*unpacker)(XDR*, struct popNode_s*);"	<< endl
         << "   int inParent;"					<< endl
         << "   int popListLength;"				<< endl
         << "   struct popNode_s* popList["
         << MAX_POPLIST_LENGTH << "];"				<< endl
         << "};"						<< endl
         << "typedef struct popNode_s popNode;"			<< endl
                                                                << endl
	 << "typedef struct {"					<< endl
	 << "   FILE* fd;"					<< endl
	 << "   int iomode;"					<< endl
	 << "   char* filename;"				<< endl
         << "   XDR* xdrs;"					<< endl
	 << "   popNode* popTop;"				<< endl
	 << "} " << classPrefix << "_iostream_t;"		<< endl
								<< endl
	 << "#endif /* HDDM_STREAM_INPUT */"			<< endl;

   builder.constructUnpackers();

   builder.hFile						<< endl
	 << "#ifdef __cplusplus"				<< endl
	 << "extern \"C\" {"					<< endl
	 << "#endif"						<< endl;
   builder.constructReadFunc(rootEl);
   builder.constructFlushFunc(rootEl);
   builder.constructOpenFunc(rootEl);
   builder.constructInitFunc(rootEl);
   builder.constructCloseFunc(rootEl);
   builder.hFile						<< endl
	 << "#ifdef __cplusplus"				<< endl
	 << "}"							<< endl
	 << "#endif"						<< endl
	            						<< endl
	 << "#if !defined HDDM_NULL"				<< endl
         << "extern int hddm_nullTarget;"			<< endl
         << "# define HDDM_NULL (void*)&hddm_nullTarget"        << endl
	 << "#endif"						<< endl;

   XMLPlatformUtils::Terminate();
   return 0;
}

XtString& XtString::plural()
{
   XtString* p = new XtString(*this);
   XtString::size_type len = p->size();
   if (len > 3 && p->substr(len-3,3) == "tum")
   {
      p->replace(len-3,3,"ta");
   }
   else if (len > 2 && p->substr(len-2,2) == "ex")
   {
      p->replace(len-2,2,"ices");
   }
   else if (len > 2 && p->substr(len-2,2) == "sh")
   {
      p->replace(len-2,2,"shes");
   }
   else if (len > 1 && p->substr(len-1,1) == "s")
   {
      p->replace(len-1,1,"ses");
   }
   else if (len > 1)
   {
      *p += "s";
   }
   return *p;
}

/* Map from tag name to name of the corresponding c-structure
 * for the case of simple tags (those that do not repeat)
 */
XtString& XtString::simpleStructType()
{
   XtString* p = new XtString(*this);
   (*p)[0] = toupper((*p)[0]);
   *p = classPrefix + "_" + *p + "_t";
   return *p;
}

/* Map from tag name to name of the corresponding c-structure
 * for the case of list tags (those that may repeat)
 */
XtString& XtString::listStructType()
{
   XtString& r = plural();
   r[0] = toupper(r[0]);
   r = classPrefix + "_" + r + "_t";
   return r;
}

/* Verify that the tag group under this element does not collide
 * with existing tag group elref, otherwise exit with fatal error
 */
void CodeBuilder::checkConsistency(DOMElement* el, DOMElement* elref)
{
   XtString tagS(el->getTagName());
   DOMNamedNodeMap* oldAttr = elref->getAttributes();
   DOMNamedNodeMap* newAttr = el->getAttributes();
   int listLength = oldAttr->getLength();
   for (int n = 0; n < listLength; n++)
   {
      XtString nameS(oldAttr->item(n)->getNodeName());
      XtString oldS(elref->getAttribute(X(nameS)));
      XtString newS(el->getAttribute(X(nameS)));
      if (nameS == "minOccurs")
      {
         continue;
      }
      else if (nameS == "maxOccurs")
      {
         int maxold = (oldS == "unbounded")? 9999 : atoi(S(oldS));
         int maxnew = (newS == "unbounded")? 9999 : atoi(S(newS));
	 if (maxold*maxnew <= maxold)
         {
            cerr << "hddm-c error: inconsistent maxOccurs usage by tag "
                 << "\"" << tagS << "\" in xml document." << endl;
            exit(1);
         }
      }
      else if (newS != oldS)
      {
         cerr << "hddm-c error: inconsistent usage of attribute "
              << "\"" << nameS << "\" in tag "
              << "\"" << tagS << "\" in xml document." << endl;
         exit(1);
      }
   }
   listLength = newAttr->getLength();
   for (int n = 0; n < listLength; n++)
   {
      XtString nameS(newAttr->item(n)->getNodeName());
      XtString oldS(elref->getAttribute(X(nameS)));
      XtString newS(el->getAttribute(X(nameS)));
      if (nameS == "minOccurs")
      {
         continue;
      }
      else if (nameS == "maxOccurs")
      {
         int maxold = (oldS == "unbounded")? 9999 : atoi(S(oldS));
         int maxnew = (newS == "unbounded")? 9999 : atoi(S(newS));
	 if (maxold*maxnew <= maxnew)
         {
            cerr << "hddm-c error: inconsistent maxOccurs usage by tag "
                 << "\"" << tagS << "\" in xml document." << endl;
            exit(1);
         }
      }
      else if (newS != oldS)
      {
         cerr << "hddm-c error: inconsistent usage of attribute "
              << "\"" << nameS << "\" in tag "
              << "\"" << tagS << "\" in xml document." << endl;
         exit(1);
      }
   }
   DOMNodeList* oldList = elref->getChildNodes();
   DOMNodeList* newList = el->getChildNodes();
   listLength = oldList->getLength();
   if (newList->getLength() != listLength)
   {
      cerr << "hddm-c error: inconsistent usage of tag "
           << "\"" << tagS << "\" in xml document." << endl;
   exit(1);
   }
   for (int n = 0; n < listLength; n++)
   {
      DOMNode* cont = oldList->item(n);
      XtString nameS(cont->getNodeName());
      short type = cont->getNodeType();
      if (type == DOMNode::ELEMENT_NODE)
      {
         DOMNodeList* contList = el->getElementsByTagName(X(nameS));
         if (contList->getLength() != 1)
         {
             cerr << "hddm-c error: inconsistent usage of tag "
                  << "\"" << tagS << "\" in xml document." << endl;
             exit(1);
         }
      }
   }
}

/* Write declaration of c-structure for this tag to c-header file */

void CodeBuilder::writeHeader(DOMElement* el)
{
   XtString tagS(el->getTagName());
   XtString ctypeDef = tagS.simpleStructType();
   hFile << endl
	 << "#ifndef SAW_" << ctypeDef 				<< endl
	 << "#define SAW_" << ctypeDef				<< endl
								<< endl
	 << "typedef struct {"					<< endl;

   DOMNamedNodeMap* varList = el->getAttributes();
   int varCount = varList->getLength();
   for (int v = 0; v < varCount; v++)
   {
      DOMNode* var = varList->item(v);
      XtString typeS(var->getNodeValue());
      XtString nameS(var->getNodeName());
      if (typeS == "int")
      {
         hFile << "   int                  " << nameS << ";" << endl;
      }
      else if (typeS == "long")
      {
         hFile << "   long long            " << nameS << ";" << endl;
      }
      else if (typeS == "float")
      {
         hFile << "   float                " << nameS << ";" << endl;
      }
      else if (typeS == "double")
      {
         hFile << "   double               " << nameS << ";" << endl;
      }
      else if (typeS == "boolean")
      {
         hFile << "   bool_t               " << nameS << ";" << endl;
      }
      else if (typeS == "string")
      {
         hFile << "   char*                " << nameS << ";" << endl;
      }
      else if (typeS == "anyURI")
      {
         hFile << "   char*                " << nameS << ";" << endl;
      }
      else if (typeS == "Particle_t")
      {
         hFile << "   Particle_t           " << nameS << ";" << endl;
      }
      else
      {
         /* ignore attributes with unrecognized values */
      }
   }

   DOMNodeList* contList = el->getChildNodes();
   int contLength = contList->getLength();
   for (int c = 0; c < contLength; c++)
   {
      DOMNode* cont = contList->item(c);
      XtString nameS(cont->getNodeName());
      short type = cont->getNodeType();
      if (type == DOMNode::ELEMENT_NODE)
      {
         DOMElement* contEl = (DOMElement*) cont;
	 XtString repAttS("maxOccurs");
         XtString repS(contEl->getAttribute(X(repAttS)));
	 int rep = (repS == "unbounded")? 9999 : atoi(S(repS));
         XtString ctypeRef = (rep > 1) ? nameS.listStructType()
	                              : nameS.simpleStructType();
         XtString::size_type clen = ctypeRef.size();

         hFile << "   " << ctypeRef << "* ";
         for (int i = 0; i < 19-(int)clen; i++)
         {
            hFile << " ";
         }
         hFile <<  ((rep > 1) ? nameS.plural() : nameS) << ";" << endl;
      }
   }

   hFile << "} " << ctypeDef << ";" << endl;

   XtString repAttS("maxOccurs");
   XtString repS(el->getAttribute(X(repAttS)));
   int rep = (repS == "unbounded")? 9999 : atoi(S(repS));
   if (rep > 1)
   {
      XtString ctypeRef = tagS.listStructType();
      hFile << endl << "typedef struct {" << endl
            << "   unsigned int mult;" << endl
            << "   " << ctypeDef << " in[1];" << endl
            << "} " << ctypeRef << ";" << endl;
   }

   hFile << "#endif /* " << ctypeDef << " */" 			<< endl;
}

/* Generate c-structure declarations for this tag and its descendants;
 * this function calls itself recursively
 */
void CodeBuilder::constructGroup(DOMElement* el)
{
   XtString tagS(el->getTagName());
   std::vector<DOMElement*>::iterator iter;
   for (iter = tagList.begin(); iter != tagList.end(); iter++)
   {
      XtString targS((*iter)->getTagName());
      if (tagS == targS)
      {
         checkConsistency(el,*iter);
         return;
      }
   }

   tagList.push_back(el);

   DOMNodeList* contList = el->getChildNodes();
   int contLength = contList->getLength();
   for (int c = 0; c < contLength; c++)
   {
      DOMNode* cont = contList->item(c);
      short type = cont->getNodeType();
      if (type == DOMNode::ELEMENT_NODE)
      {
         DOMElement* contEl = (DOMElement*) cont;
         constructGroup(contEl);
      }
   }

   writeHeader(el);
}

/* Generate c code for make_<class letter>_<group name> functions */

void CodeBuilder::constructMakeFuncs()
{
   std::vector<DOMElement*>::iterator iter;
   for (iter = tagList.begin(); iter != tagList.end(); iter++)
   {
      DOMElement* tagEl = *iter;
      XtString tagS(tagEl->getTagName());
      XtString listType = tagS.listStructType();
      XtString simpleType = tagS.simpleStructType();

      hFile << endl;
      cFile << endl;

      XtString repAttS("maxOccurs");
      XtString repS = tagEl->getAttribute(X(repAttS));
      int rep = (repS == "unbounded")? 9999 : atoi(S(repS));
      if (rep > 1)
      {
         hFile << listType << "* ";
         cFile << listType << "* ";
         XtString listT(listType);
         listT.erase(listT.rfind('_'));
         hFile << "make_" << listT;
         cFile << "make_" << listT;
         hFile << "(int n);" 					<< endl;
         cFile << "(int n)" 					<< endl
               << "{"						<< endl
               << "   int i;"					<< endl
               << "   int rep = (n > 1) ? n-1 : 0;"		<< endl
               << "   int size = sizeof(" << listType
               << ") + rep * sizeof(" << simpleType << ");"	<< endl
               << "   " << listType
               << "* p = (" << listType << "*)MALLOC(size,\""
               << listType << "\");"				<< endl
               << "   p->mult = 0;"				<< endl
               << "   for (i=0; i<n; i++) {"			<< endl
               << "      " << simpleType << "* pp = &p->in[i];" << endl;
         DOMNamedNodeMap* varList = tagEl->getAttributes();
         int varCount = varList->getLength();
         for (int v = 0; v < varCount; v++)
         {
            DOMNode* var = varList->item(v);
            XtString typeS(var->getNodeValue());
            XtString nameS(var->getNodeName());
            if (typeS == "string" || 
                typeS == "anyURI")
            {
               cFile << "      pp->" << nameS
                     << " = (" << typeS
                     << "*)&hddm_nullTarget;"			<< endl;
            }
            else if (typeS == "int" ||
	             typeS == "long" ||
                     typeS == "float" ||
                     typeS == "double" ||
                     typeS == "boolean" ||
                     typeS == "Particle_t")
            {
               cFile << "      pp->" << nameS << " = 0;"	<< endl;
            }
         }
         DOMNodeList* contList = tagEl->getChildNodes();
         for (int c = 0; c < contList->getLength(); c++)
         {
            DOMNode* cont = contList->item(c);
            short ctype = cont->getNodeType();
            if (ctype == DOMNode::ELEMENT_NODE)
            {
               DOMElement* contEl = (DOMElement*) cont;
               XtString cnameS(contEl->getTagName());
               XtString crepS(contEl->getAttribute(X(repAttS)));
	       int crep = (crepS == "unbounded")? 9999 : atoi(S(crepS));
               if (crep > 1)
               {
                  cFile << "   pp->" << cnameS.plural()
                        << " = (" << cnameS.listStructType()
                        << "*)&hddm_nullTarget;"		<< endl;
               }
               else
               {
                  cFile << "   pp->" << cnameS
                        << " = (" << cnameS.simpleStructType()
                        << "*)&hddm_nullTarget;"		<< endl;
               }
            }
         }
         cFile << "   }"					<< endl;
      }
      else
      {
         hFile << simpleType << "* ";
         cFile << simpleType << "* ";
         XtString simpleT(simpleType);
         simpleT.erase(simpleT.rfind('_'));
         hFile << "make_" << simpleT;
         cFile << "make_" << simpleT;
         hFile << "();"	 					<< endl;
         cFile << "()"	 					<< endl
               << "{"						<< endl
               << "   int size = sizeof(" << simpleType << ");"	<< endl
               << "   " << simpleType << "* p = "
               << "(" << simpleType << "*)MALLOC(size,\""
               << simpleType << "\");"				<< endl;
         DOMNamedNodeMap* varList = tagEl->getAttributes();
         int varCount = varList->getLength();
         for (int v = 0; v < varCount; v++)
         {
            DOMNode* var = varList->item(v);
            XtString typeS(var->getNodeValue());
            XtString nameS(var->getNodeName());
            if (typeS == "string" || 
                typeS == "anyURI")
            {
               cFile << "   p->" << nameS
                     << " = (" << typeS
                     << "*)&hddm_nullTarget;"			<< endl;
            }
            else if (typeS == "int" ||
	             typeS == "long" ||
                     typeS == "float" ||
                     typeS == "double" ||
                     typeS == "boolean" ||
                     typeS == "Particle_t")
            {
               cFile << "   p->" << nameS << " = 0;"		<< endl;
            }
         }
         DOMNodeList* contList = tagEl->getChildNodes();
         for (int c = 0; c < contList->getLength(); c++)
         {
            DOMNode* cont = contList->item(c);
            short ctype = cont->getNodeType();
            if (ctype == DOMNode::ELEMENT_NODE)
            {
               DOMElement* contEl = (DOMElement*) cont;
               XtString cnameS(contEl->getTagName());
               XtString crepS(contEl->getAttribute(X(repAttS)));
	       int crep = (crepS == "unbounded")? 9999 : atoi(S(crepS));
               if (crep > 1)
               {
                  cFile << "   p->" << cnameS.plural()
                        << " = (" << cnameS.listStructType()
                        << "*)&hddm_nullTarget;"		<< endl;
               }
               else
               {
                  cFile << "   p->" << cnameS
                        << " = (" << cnameS.simpleStructType()
                        << "*)&hddm_nullTarget;"		<< endl;
               }
            }
         }
      }
      cFile << "   return p;"					<< endl
            << "}"						<< endl;
   }
}

/* Generate c functions for unpacking binary stream into c-structures */

void CodeBuilder::constructUnpackers()
{
   cFile << endl;
   std::vector<DOMElement*>::iterator iter;
   for (iter = tagList.begin(); iter != tagList.end(); iter++)
   {
      DOMElement* tagEl = *iter;
      XtString tagS(tagEl->getTagName());
      XtString listType = tagS.listStructType();
      XtString simpleType = tagS.simpleStructType();

      cFile << endl << "static ";

      XtString tagType;
      XtString repAttS("maxOccurs");
      XtString repS = tagEl->getAttribute(X(repAttS));
      int rep = (repS == "unbounded")? 9999 : atoi(S(repS));
      if (rep > 1)
      {
         tagType = tagS.listStructType();
      }
      else
      {
         tagType = tagS.simpleStructType();
      }
      XtString tagT(tagType);
      tagT.erase(tagT.rfind('_'));
      cFile << tagType << "* unpack_" << tagT
            << "(XDR* xdrs, popNode* pop)"
								<< endl
            << "{"						<< endl
            << "   " << tagType << "* this1 = HDDM_NULL;"	<< endl
            << "   unsigned int size;"				<< endl
	    << "   if (! xdr_u_int(xdrs,&size))"		<< endl
            << "   {"						<< endl
	    << "       return this1;"				<< endl
            << "   }"						<< endl
            << "   else if (size > 0)"				<< endl
            << "   {"						<< endl
            << "      int start = xdr_getpos(xdrs);"		<< endl;

      if (rep > 1)
      {
         cFile << "      int m;"				<< endl
               << "      unsigned int mult;"			<< endl
	       << "      xdr_u_int(xdrs,&mult);"		<< endl
               << "      this1 = make_" << tagT << "(mult);"	<< endl
               << "      this1->mult = mult;"			<< endl
               << "      for (m = 0; m < mult; m++ )"		<< endl
               << "      {"					<< endl;
      }
      else
      {
         cFile << "      this1 = make_" << tagT << "();"	<< endl
               << "      {"					<< endl;
      }

      int hasContents = 0;
      DOMNodeList* contList = tagEl->getChildNodes();
      for (int c = 0; c < contList->getLength(); c++)
      {
         DOMNode* cont = contList->item(c);
         short type = cont->getNodeType();
         if (type == DOMNode::ELEMENT_NODE)
         {
            hasContents = 1;
            DOMElement* contEl = (DOMElement*) cont;
            XtString nameS(contEl->getTagName());
            XtString reS(contEl->getAttribute(X(repAttS)));
	    int re = (reS == "unbounded")? 9999 : atoi(S(reS));
            cFile << "         int p;"				<< endl
                  << "         void* (*ptr) = (void**) &this1->"
                  << ((rep > 1) ? "in[m]." : "" )
                  << ((re > 1) ? nameS.plural() : nameS) << ";"	<< endl;
            break;
         }
      }

      DOMNamedNodeMap* attList = tagEl->getAttributes();
      for (int a = 0; a < attList->getLength(); a++)
      {
         DOMNode* att = attList->item(a);
         XtString typeS(att->getNodeValue());
         XtString nameS(att->getNodeName());
         XtString nameStr(nameS);
         if (rep > 1)
         {
            nameStr = "in[m]." + nameS;
         }
         if (typeS == "int")
         {
            cFile << "         xdr_int(xdrs,&this1->"
	          << nameStr << ");"				 << endl;
         }
	 else if (typeS == "long")
         {
            cFile << "#ifndef XDR_LONGLONG_MISSING"		 << endl
                  << "         xdr_longlong_t(xdrs,&this1->"
	          << nameStr << ");"				 << endl
                  << "#else"					 << endl
                  << "         {"				 << endl
                  << "            int* " << nameStr << "_ = "
                  << "(int*)&this1->" << nameStr << ";"		 << endl
                  << "# if __BIG_ENDIAN__"			 << endl
                  << "            xdr_int(xdrs,&"
                  << nameStr << "_[0]);"			 << endl
                  << "            xdr_int(xdrs,&"
                  << nameStr << "_[1]);"			 << endl
                  << "# else"					 << endl
                  << "            xdr_int(xdrs,&"
                  << nameStr << "_[1]);"			 << endl
                  << "            xdr_int(xdrs,&"
                  << nameStr << "_[0]);"			 << endl
                  << "# endif"					 << endl
                  << "         }"				 << endl
                  << "#endif"					 << endl;
         }
         else if (typeS == "float")
         {
            cFile << "         xdr_float(xdrs,&this1->"
	          << nameStr << ");"				 << endl;
         }
         else if (typeS == "double")
         {
            cFile << "         xdr_double(xdrs,&this1->"
	          << nameStr << ");"				 << endl;
         }
         else if (typeS == "boolean")
         {
            cFile << "         xdr_bool(xdrs,&this1->"
	          << nameStr << ");"				 << endl;
         }
         else if (typeS == "Particle_t")
         {
            cFile << "         xdr_int(xdrs,(int*)&this1->"
	          << nameStr << ");"				 << endl;
         }
         else if (typeS == "string")
         {
            cFile << "         xdr_string(xdrs,&this1->"
	          << nameStr << ", 1000000);"			 << endl;
         }
         else if (typeS == "anyURI")
         {
            cFile << "         xdr_string(xdrs,&this1->"
	          << nameStr << ", 1000000);"			 << endl;
         }
         else
         {
            /* ignore attributes with unrecognized values */
         }
      }

      if (hasContents)
      {
         cFile << "         for (p = 0; p < pop->popListLength; p++)"	<< endl
               << "         {"						<< endl
               << "            popNode* pnode = pop->popList[p];"	<< endl
               << "            if (pnode)"				<< endl
               << "            {"					<< endl
               << "               int kid = pnode->inParent;"		<< endl
               << "               ptr[kid] = pnode->unpacker(xdrs,pnode);"
	       								<< endl
               << "            }"					<< endl
               << "            else"					<< endl
               << "            {"					<< endl
               << "               unsigned int skip;"			<< endl
	       << "               xdr_u_int(xdrs,&skip);"		<< endl
               << "               xdr_setpos(xdrs,xdr_getpos(xdrs)+skip);"
	       								<< endl
               << "            }"					<< endl
               << "         }"						<< endl;
      }
      cFile << "      }"						<< endl
            << "      xdr_setpos(xdrs,start+size);"			<< endl
            << "   }"							<< endl
            << "   return this1;"					<< endl
            << "}"							<< endl;
   }
}
 
/* Generate c function to read from binary stream into c-structures */

void CodeBuilder::constructReadFunc(DOMElement* topEl)
{
   XtString topS(topEl->getTagName());
   XtString topType = topS.simpleStructType();
   XtString topT(topType);
   topT.erase(topT.rfind('_'));
   hFile								<< endl
	 << topType << "* read_" << topT
	 << "(" << classPrefix << "_iostream_t* fp" << ");"		<< endl;

   cFile								<< endl
	 << topType << "* read_" << topT
	 << "(" << classPrefix << "_iostream_t* fp" << ")"		<< endl
	 << "{"								<< endl
         << "   " << topType << "* nextEvent = " 
	 << "unpack_" << topT << "(fp->xdrs,fp->popTop);"		<< endl
	 << "   return (nextEvent == HDDM_NULL)? 0 : nextEvent;"	<< endl
	 << "}"								<< endl;
}

/* Generate streamers for packing c-structures onto a binary stream
 * and deleting them from memory when output is complete
 */

void CodeBuilder::constructPackers()
{
   cFile << endl;
   std::vector<DOMElement*>::iterator iter;
   for (iter = tagList.begin(); iter != tagList.end(); iter++)
   {
      DOMElement* tagEl = *iter;
      XtString tagS(tagEl->getTagName());
      XtString listType = tagS.listStructType();
      XtString simpleType = tagS.simpleStructType();

      cFile << "static ";

      XtString tagType;
      XtString repAttS("maxOccurs");
      XtString repS(tagEl->getAttribute(X(repAttS)));
      int rep = (repS == "unbounded")? 9999 : atoi(S(repS));
      if (rep > 1)
      {
         tagType = listType;
      }
      else
      {
         tagType = simpleType;
      }
      XtString tagT(tagType);
      tagT.erase(tagT.rfind('_'));
      cFile << "int pack_" << tagT << "(XDR* xdrs, "
            << tagType << "* this1);"				<< endl;
   }

   for (iter = tagList.begin(); iter != tagList.end(); iter++)
   {
      DOMElement* tagEl = *iter;
      XtString tagS(tagEl->getTagName());
      XtString listType = tagS.listStructType();
      XtString simpleType = tagS.simpleStructType();

      cFile << endl << "static ";

      XtString tagType;
      XtString repAttS("maxOccurs");
      XtString repS(tagEl->getAttribute(X(repAttS)));
      int rep = (repS == "unbounded")? 9999 : atoi(S(repS));
      if (rep > 1)
      {
         tagType = listType;
      }
      else
      {
         tagType = simpleType;
      }
      XtString tagT(tagType);
      tagT.erase(tagT.rfind('_'));
      cFile << "int pack_" << tagT << "(XDR* xdrs, "
            << tagType << "* this1)"				<< endl
            << "{"						<< endl
            << "   int m;"					<< endl
            << "   unsigned int size=0;"			<< endl
            << "   int base,start,end;"				<< endl
            << "   base = xdr_getpos(xdrs);"			<< endl
            << "   xdr_u_int(xdrs,&size);"			<< endl
            << "   start = xdr_getpos(xdrs);"			<< endl
    								<< endl;
      if (rep > 1)
      {
         cFile << "   xdr_u_int(xdrs,&this1->mult);"		<< endl
               << "   for (m = 0; m < this1->mult; m++)"	<< endl
               << "   {"					<< endl;
      }
      else
      {
	 cFile << "   m = 0; /* avoid warnings from -Wall */"	<< endl
               << "   {"					<< endl;
      }

      DOMNamedNodeMap* attList = tagEl->getAttributes();
      for (int a = 0; a < attList->getLength(); a++)
      {
         DOMNode* att = attList->item(a);
         XtString typeS(att->getNodeValue());
         XtString nameS(att->getNodeName());
         XtString nameStr(nameS);
         if (rep > 1)
         {
            nameStr = "in[m]." + nameS;
         }
         if (typeS == "int")
         {
            cFile << "      xdr_int(xdrs,&this1->"
                  << nameStr << ");"				 << endl;
         }
         if (typeS == "long")
         {
            cFile << "#ifndef XDR_LONGLONG_MISSING"		 << endl
                  << "         xdr_longlong_t(xdrs,&this1->"
	          << nameStr << ");"				 << endl
                  << "#else"					 << endl
                  << "         {"				 << endl
                  << "            int* " << nameStr << "_ = "
                  << "(int*)&this1->" << nameStr << ";"		 << endl
                  << "# if __BIG_ENDIAN__"			 << endl
                  << "            xdr_int(xdrs,&"
                  << nameStr << "_[0]);"			 << endl
                  << "            xdr_int(xdrs,&"
                  << nameStr << "_[1]);"			 << endl
                  << "# else"					 << endl
                  << "            xdr_int(xdrs,&"
                  << nameStr << "_[1]);"			 << endl
                  << "            xdr_int(xdrs,&"
                  << nameStr << "_[0]);"			 << endl
                  << "# endif"					 << endl
                  << "         }"				 << endl
                  << "#endif"					 << endl;
         }
         else if (typeS == "float")
         {
            cFile << "      xdr_float(xdrs,&this1->"
                  << nameStr << ");"				 << endl;
         }
         else if (typeS == "double")
         {
            cFile << "      xdr_double(xdrs,&this1->" 
                  << nameStr << ");" 				 << endl;
         }
         else if (typeS == "boolean")
         {
            cFile << "      xdr_bool(xdrs,&this1->"
                  << nameStr << ");"				 << endl;
         }
         else if (typeS == "Particle_t")
         {
            cFile << "      xdr_int(xdrs,(int*)&this1->"
                  << nameStr << ");"  				 << endl;
         }
         else if (typeS == "string")
         {
            cFile << "      xdr_string(xdrs,&this1->" 
                  << nameStr << ", 1000000);"			 << endl;
         }
         else if (typeS == "anyURI")
         {
            cFile << "      xdr_string(xdrs,&this1->" 
                  << nameStr << ", 1000000);" 			 << endl;
         }
         else
         {
            /* ignore attributes with unrecognized values */
         }
      }

      DOMNodeList* contList = tagEl->getChildNodes();
      for (int c = 0; c < contList->getLength(); c++)
      {
         DOMNode* cont = contList->item(c);
         short type = cont->getNodeType();
         if (type == DOMNode::ELEMENT_NODE)
         {
            DOMElement* contEl = (DOMElement*) cont;
            XtString nameS(contEl->getTagName());
            XtString reS(contEl->getAttribute(X(repAttS)));
	    int re = (reS == "unbounded")? 9999 : atoi(S(reS));
            XtString contType;
            if (re > 1)
            {
               contType = nameS.listStructType();
            }
            else
            {
               contType = nameS.simpleStructType();
            }
            XtString contT(contType);
            contT.erase(contT.rfind('_'));
            cFile << "      if (this1->"
                  << ((rep > 1)? "in[m]." : "")
                  << ((re > 1)? nameS.plural(): nameS) << " != ("
                  << contType << "*)&hddm_nullTarget)"			<< endl
                  << "      {"						<< endl
                  << "         pack_" << contT << "(xdrs,this1->"
                  << ((rep > 1)? "in[m]." : "")
                  << ((re > 1)? nameS.plural() : nameS) << ");"			<< endl
                  << "      }"						<< endl
                  << "      else"					<< endl
                  << "      {"						<< endl
		  << "         int zero=0;"				<< endl
                  << "         xdr_int(xdrs,&zero);"			<< endl
                  << "      }"						<< endl;
         }
      }

      cFile << "   }"							<< endl
            << "   FREE(this1);"					<< endl
            << "   end = xdr_getpos(xdrs);"				<< endl
            << "   xdr_setpos(xdrs,base);"				<< endl
	    << "   size = end-start;"					<< endl
            << "   xdr_u_int(xdrs,&size);"				<< endl
            << "   xdr_setpos(xdrs,end);"				<< endl
            << "   return size;"					<< endl
            << "}"							<< endl;
   }
}

/* Generate c functions for exporting c-structures onto a binary stream */
 
void CodeBuilder::constructFlushFunc(DOMElement* el)
{
   DOMElement* topEl = tagList[0];
   XtString topS(topEl->getTagName());
   XtString topType = topS.simpleStructType();
   XtString topT(topType);
   topT.erase(topT.rfind('_'));

   constructPackers();

   hFile 							<< endl
	 << "int flush_" << topT << "(" << topType << "* this1,"
	 << classPrefix << "_iostream_t* fp" << ");"		<< endl;

   cFile 							<< endl
	 << "int flush_" << topT << "(" << topType << "* this1,"
	 << classPrefix << "_iostream_t* fp" << ")"		<< endl
	 << "{"							<< endl
         << "   if (this1 == 0)"				<< endl
         << "   {"						<< endl
	 << "      return 0;"					<< endl
         << "   }"						<< endl
         << "   else if (fp == 0)"				<< endl
         << "   {"						<< endl
	 << "      XDR* xdrs = (XDR*)malloc(sizeof(XDR));"	<< endl
	 << "      int max_buffer_size = 1000000;"		<< endl
	 << "      char* dump = (char*)malloc(max_buffer_size);"<< endl
	 << "      xdrmem_create(xdrs,dump,max_buffer_size,XDR_ENCODE);"
	 							<< endl
	 << "      pack_" << topT << "(xdrs,this1);"		<< endl
	 << "      xdr_destroy(xdrs);"				<< endl
	 << "      free(xdrs);"					<< endl
	 << "      free(dump);"					<< endl
	 << "      return 0;"					<< endl
         << "   }"						<< endl
         << "   else if (fp->iomode == HDDM_STREAM_OUTPUT)"	<< endl
	 << "   {"						<< endl
	 << "      pack_" << topT << "(fp->xdrs,this1);"		<< endl
	 << "      return 0;"					<< endl
	 << "   }"						<< endl
	 << "   return 0;"			<< endl
	 << "}"							<< endl;
}

/* Generate c functions that match up corresponding elements between
 * the c structures and the data model that appears on the input
 * binary stream.  If successful, these routines build a hierarchical
 * structure (the "pop tree") that gives directions to the unpackers.
 *
 * The matching rules are as follows:
 *
 *  1) The attribute list for any given tag must be identical in content
 *     and order wherever it appears, otherwise there is a collision.
 *
 *  2) The content list for any given tag must be internally consistent
 *     within each model, but there are no requirements for agreement
 *     between the c-structures and the binary stream models.  Only the
 *     contents which appear in both models will be unpacked, however.
 */

void CodeBuilder::writeMatcher()
{
   cFile							<< endl
	 << "static int getTag(char* d, char* tag)"		<< endl
	 << "{"							<< endl
	 << "   int level;"					<< endl
	 << "   char* token;"					<< endl
	 << "   char line[500];"				<< endl
	 << "   strncpy(line,d,500);"				<< endl
	 << "   line[499] = 0;"					<< endl
	 << "   level = index(line,'<')-line;"			<< endl
	 << "   if (level < 500 &&"				<< endl
	 << "      (token = strtok(line+level+1,\" >\")))"	<< endl
	 << "   {"						<< endl
	 << "      strncpy(tag,token,500);"			<< endl
	 << "      return level/2;"				<< endl
	 << "   }"						<< endl
	 << "   return -1;"					<< endl
	 << "}"							<< endl
   								<< endl
	 << "static char* getEndTag(char* d, char* tag)"	<< endl
	 << "{"							<< endl
	 << "   char line[500];"				<< endl
	 << "   char endTag[510];"				<< endl
	 << "   strncpy(line,d,500);"				<< endl
	 << "   line[499] = 0;"					<< endl
         << "   if (strstr(strtok(line,\"\\n\"),\"/>\") == 0)"	<< endl
	 << "   {"						<< endl
	 << "      sprintf(endTag,\"</%s>\",tag);"		<< endl
	 << "   }"						<< endl
	 << "   else"						<< endl
	 << "   {"						<< endl
         << "      strcpy(endTag,\"/>\");"			<< endl
	 << "   }"						<< endl
	 << "   return strstr(d,endTag);"			<< endl
	 << "}"							<< endl
        							<< endl
	 << "static void collide(char* tag)"			<< endl
	 << "   {"						<< endl
	 << "      fprintf(stderr,\"HDDM Error: \");"		<< endl
	 << "      fprintf(stderr,\"input template model for tag \");"	<< endl
	 << "      fprintf(stderr,\"%s does not match c code.\", tag);"	<< endl
	 << "      fprintf(stderr,\"\\nPlease recompile.\\n\");"	<< endl
	 << "      exit(9);"					<< endl
	 << "   }"						<< endl
								<< endl
	 << "static popNode* matches(char* b, char* c)"		<< endl
	 << "{"							<< endl
	 << "   char btag[500];"				<< endl
	 << "   char ctag[500];"				<< endl
	 << "   int blevel, clevel;"				<< endl
         << "   int ptrSeqNo = 0;"				<< endl
	 << "   blevel = getTag(b,btag);"			<< endl
	 << "   while ((clevel = getTag(c,ctag)) == blevel)"	<< endl
	 << "   {"						<< endl
	 << "      if "
	 << "((clevel == blevel) && (strcmp(ctag,btag) == 0))"	<< endl
	 << "      {"						<< endl
         << "         popNode* this1 = "
         << "(popNode*)malloc(sizeof(popNode));"		<< endl
	 << "         int len = index(c+1,'\\n') - c;"		<< endl
	 << "         if (strncmp(c,b,len) != 0)"		<< endl
	 << "         {"					<< endl
         << "            collide(btag);"			<< endl
	 << "         }"					<< endl;

   int firstTag = 1;
   std::vector<DOMElement*>::iterator iter;
   for (iter = tagList.begin(); iter != tagList.end(); iter++)
   {
      XtString tagS((*iter)->getTagName());
      XtString repAttS("maxOccurs");
      XtString repS((*iter)->getAttribute(X(repAttS)));
      int rep = (repS == "unbounded")? 9999 : atoi(S(repS));
      XtString tagType;
      if (rep > 1)
      {
         tagType = tagS.listStructType();
      }
      else
      {
         tagType = tagS.simpleStructType();
      }
      XtString tagT(tagType);
      tagT.erase(tagT.rfind('_'));

      if (firstTag)
      {
         firstTag = 0;
         cFile << "         if ";
      }
      else
      {
         cFile << "         else if ";
      }
      cFile << "(strcmp(btag,\"" << tagS << "\") == 0)"		<< endl
            << "         {"					<< endl
	    << "            this1->unpacker = "
	    << "(void*(*)(XDR*,popNode*))"
            << "unpack_" << tagT << ";"				<< endl
            << "         }"					<< endl;
   }

   cFile << "         else"					<< endl
	 << "         {"					<< endl
         << "            collide(btag);"			<< endl
	 << "         }"					<< endl
         << "         this1->inParent = ptrSeqNo;"		<< endl
         << "         this1->popListLength = 0;"		<< endl
	 << "         c = index(c+1,'\\n');"			<< endl
	 << "         b = index(b+1,'\\n');"			<< endl
	 << "         while (getTag(b,btag) > blevel)"		<< endl
	 << "         {"					<< endl
         << "            this1->popList[this1->popListLength++] = matches(b,c);"
								<< endl 
         << "            if (this1->popListLength > "
         << MAX_POPLIST_LENGTH << ")"				<< endl
         << "            {"					<< endl
         << "               fprintf(stderr,"
         << "\"hddm error - posList overflow.\\n\");"		<< endl
         << "               fprintf(stderr,"
         << "\"Increase MAX_POPLIST_LENGTH and recompile.\\n\");" << endl
         << "               exit(9);"				<< endl
         << "            }"					<< endl
	 << "            b = getEndTag(b,btag);"		<< endl
	 << "            b = index(b+1,'\\n');"			<< endl
	 << "         }"					<< endl
	 << "         return this1;"				<< endl
	 << "      }"						<< endl
	 << "      else"					<< endl
	 << "      {"						<< endl
	 << "         c = getEndTag(c,ctag);"			<< endl
	 << "         c = index(c+1,'\\n');"			<< endl
	 << "         ++ptrSeqNo;"				<< endl
	 << "      }"						<< endl
	 << "   }"						<< endl
	 << "   return 0;"					<< endl
	 << "}"							<< endl;
}

/* Generate c code to open a hddm file for reading */

void CodeBuilder::constructOpenFunc(DOMElement* el)
{
   XtString tagS(el->getTagName());
   XtString tagType = tagS.simpleStructType();
   XtString tagT(tagType);
   tagT.erase(tagT.rfind('_'));
   hFile							<< endl
	 << classPrefix << "_iostream_t* "
	 << "open_" << tagT << "(char* filename);"		<< endl;

   writeMatcher();

   cFile							<< endl
	 << classPrefix << "_iostream_t* "
	 << "open_" << tagT << "(char* filename)"		<< endl
	 << "{"							<< endl
	 << "   " << classPrefix << "_iostream_t* fp = "
	 << "(" << classPrefix << "_iostream_t*)"
	 << "malloc(sizeof(" << classPrefix << "_iostream_t));"	<< endl
	 << "   char* p;"					<< endl
	 << "   char* head;"					<< endl
         << "   if (filename)"					<< endl
         << "   {"						<< endl
	 << "      fp->fd = fopen(filename,\"r\");"		<< endl
         << "   }"						<< endl
         << "   else"						<< endl
         << "   {"						<< endl
	 << "      fp->fd = fdopen(0,\"r\");"			<< endl
         << "   }"						<< endl
	 << "   if (fp->fd == 0)"				<< endl
	 << "   {"						<< endl
	 << "      free(fp);"					<< endl
	 << "      return 0;"					<< endl
	 << "   }"						<< endl
	 << "   fp->iomode = HDDM_STREAM_INPUT;"		<< endl
	 << "   head = (char*)malloc(1000000);"			<< endl
	 << "   *head = 0;"					<< endl
	 << "   for (p = head;"					<< endl
	 << "        strstr(head,\"</HDDM>\") == 0;"		<< endl
	 << "        p += strlen(p))"				<< endl
	 << "   {"						<< endl
	 << "      if (p-head < 999000)"			<< endl
	 << "      {"						<< endl
	 << "         fgets(p,1000,fp->fd);"			<< endl
	 << "      }"						<< endl
	 << "      else"					<< endl
	 << "      {"						<< endl
	 << "         break;"					<< endl
	 << "      }"						<< endl
	 << "   }"						<< endl
	 << "   fp->popTop = matches(head,HDDM_" << classPrefix
	 << "_DocumentString);"					<< endl
	 << "   free(head);" 					<< endl
         << "   if (fp->popTop == 0)"				<< endl
	 << "   {"						<< endl
	 << "      fprintf(stderr,\"HDDM Error: \");"		<< endl
	 << "      fprintf(stderr,\"input template model \");"	<< endl
	 << "      fprintf(stderr,\"does not match c code.\");"	<< endl
	 << "      fprintf(stderr,\"  Please recompile.\\n\");"	<< endl
	 << "      exit(9);"					<< endl
	 << "   }"						<< endl
	 << "   fp->filename = "
         << "(char*)malloc(strlen(filename) + 1);"		<< endl
	 << "   strcpy(fp->filename,filename);"			<< endl
	 << "   fp->xdrs = (XDR*)malloc(sizeof(XDR));"		<< endl
         << "   xdrstdio_create(fp->xdrs,fp->fd,XDR_DECODE);"	<< endl
	 << "   return fp;"					<< endl
	 << "}"							<< endl;
}

/* Generate the c code to open a hddm file for writing */

void CodeBuilder::constructInitFunc(DOMElement* el)
{
   XtString tagS(el->getTagName());
   XtString tagType = tagS.simpleStructType();
   XtString tagT(tagType);
   tagT.erase(tagT.rfind('_'));
   hFile							<< endl
	 << classPrefix << "_iostream_t* "
	 << "init_" << tagT << "(char* filename);"		<< endl;
   cFile							<< endl
	 << classPrefix << "_iostream_t* "
	 << "init_" << tagT << "(char* filename)"		<< endl
	 << "{"							<< endl
	 << "   int len;"					<< endl	
	 << "   char* head;"					<< endl
	 << "   " << classPrefix << "_iostream_t* fp = "
	 << "(" << classPrefix << "_iostream_t*)"
	 << "malloc(sizeof(" << classPrefix << "_iostream_t));"	<< endl
         << "   if (filename)"					<< endl
         << "   {"						<< endl
	 << "      fp->fd = fopen(filename,\"w\");"		<< endl
         << "   }"						<< endl
         << "   else"						<< endl
         << "   {"						<< endl
	 << "      fp->fd = fdopen(1,\"w\");"			<< endl
         << "   }"						<< endl
	 << "   if (fp->fd == 0)"				<< endl
	 << "   {"						<< endl
	 << "      free(fp);"					<< endl
	 << "      return 0;"					<< endl
	 << "   }"						<< endl
	 << "   fp->iomode = HDDM_STREAM_OUTPUT;"		<< endl
	 << "   len = strlen(HDDM_" 
	 << classPrefix << "_DocumentString);"			<< endl
	 << "   head = (char*)malloc(len+1);"			<< endl
	 << "   strcpy(head,HDDM_"
	 << classPrefix << "_DocumentString);"			<< endl
	 << "   if (fwrite(head,1,len,fp->fd) != len)"		<< endl
	 << "   {"						<< endl
	 << "      fprintf(stderr,\"HDDM Error: \");"		<< endl
	 << "      fprintf(stderr,\"error writing to \");"	<< endl
	 << "      fprintf(stderr,\"output file %s\\n\",filename);" << endl
	 << "      exit(9);"					<< endl
	 << "   }"						<< endl
	 << "   fp->filename = "
         << "(char*)malloc(strlen(filename) + 1);"		<< endl
	 << "   strcpy(fp->filename,filename);"			<< endl
         << "   fp->popTop = 0;"				<< endl
	 << "   fp->xdrs = (XDR*)malloc(sizeof(XDR));"		<< endl
         << "   xdrstdio_create(fp->xdrs,fp->fd,XDR_ENCODE);"	<< endl
	 << "   free(head);"					<< endl
	 << "   return fp;"					<< endl
	 << "}"							<< endl;
}

/* Generate the c code to close an open hddm file */

void CodeBuilder::constructCloseFunc(DOMElement* el)
{
   XtString tagS(el->getTagName());
   XtString tagType = tagS.simpleStructType();
   XtString tagT(tagType);
   tagT.erase(tagT.rfind('_'));
   hFile							<< endl
	 << "void close_" << tagT << "("
	 << classPrefix << "_iostream_t* fp);"			<< endl;

   cFile							<< endl
         << "void popaway(popNode* p)"				<< endl
         << "{"							<< endl
         << "   if (p)"						<< endl
         << "   {"						<< endl
         << "      int n;"					<< endl
         << "      for (n = 0; n < p->popListLength; n++)"	<< endl
         << "      {"						<< endl
         << "         popaway(p->popList[n]);"			<< endl
         << "      }"						<< endl
         << "      free(p);"					<< endl
         << "   }"						<< endl
         << "}"							<< endl
								<< endl
	 << "void close_" << tagT
	 << "(" << classPrefix << "_iostream_t* fp)"		<< endl
	 << "{"							<< endl
	 << "   xdr_destroy(fp->xdrs);"				<< endl	
	 << "   free(fp->xdrs);"				<< endl
	 << "   fclose(fp->fd);"				<< endl	
	 << "   free(fp->filename);"				<< endl	
         << "   popaway(fp->popTop);"				<< endl
	 << "   free(fp);"					<< endl	
	 << "}"							<< endl;
}

/* Generate the xml template in normal form and store in a string */

void CodeBuilder::constructDocument(DOMElement* el)
{
   static int indent = 0;
   cFile << "\"";
   for (int n = 0; n < indent; n++)
   {
      cFile << "  ";
   }
   
   XtString tagS(el->getTagName());
   cFile << "<" << tagS;
   DOMNamedNodeMap* attrList = el->getAttributes();
   int attrListLength = attrList->getLength();
   for (int a = 0; a < attrListLength; a++)
   {
      DOMNode* node = attrList->item(a);
      XtString nameS(node->getNodeName());
      XtString valueS(node->getNodeValue());
      cFile << " " << nameS << "=\\\"" << valueS << "\\\"";
   }

   DOMNodeList* contList = el->getChildNodes();
   int contListLength = contList->getLength();
   if (contListLength > 0)
   {
      cFile << ">\\n\"" << endl;
      indent++;
      for (int c = 0; c < contListLength; c++)
      {
         DOMNode* node = contList->item(c);
         if (node->getNodeType() == DOMNode::ELEMENT_NODE)
         {
            DOMElement* contEl = (DOMElement*) node;
            constructDocument(contEl);
         }
      }
      indent--;
      cFile << "\"";
      for (int n = 0; n < indent; n++)
      {
         cFile << "  ";
      }
      cFile << "</" << tagS << ">\\n\"" << endl;
   }
   else
   {
      cFile << " />\\n\"" << endl;
   }
}
