/*
 *  hddm-c :	tool that reads in a HDDM document (Hall D Data Model)
 *		and writes a c header file that embodies the model in
 *		c structures.  It also generates an input/output pair
 *		of functions to translate the model between the memory
 *		representation and a default binary representation that
 *		is suitable for passing over a pipe or storing on disk.
 *
 *  Original version - Richard Jones, May 25 2001.
 *
 *
 *  Programmer's Notes:
 *  -------------------
 * 1. The HDDM specification is in the form of an xml document.  For
 *    information about the contents and structure of HDDM documents
 *    see the web pages in ./doc that describes the data model.
 *
 * 2. Access by hddm-c to the xml source is through the industry-
 *    standard DOM-1 interface.
 *
 * 3. The code has been tested with the xerces-c DOM implementation from
 *    Apache, and is intended to be used with the xerces-c library.
 *
 * 4. Output is sent to <filename>.h and <filename>.c where <filename> is
 *    by default "hddm" and can be changed with the -o option.
 *
 * 5. As a by-product of using the DOM parser to access the xml source,
 *    hddm-c verifies the source for well-formedness.  Therefore it may
 *    also be used to check the xml data model document.
 *
 *
 *  Implementation Notes:
 *  ---------------------
 * 1. The binary stream consists of the hddm data model in the form
 *    of a well-formed xml document, followed by binary data.
 *
 * 2. The binary data consist of a sequence of event records, which are
 *    repetitions of the basic data model in a serial representation.
 *
 * 3. Each element is output to the stream in the order it appears in
 *    the data model, prefixed by an exclusive word (4-byte) count.
 *
 * 4. Any c application compiled with the hddm header file that is
 *    generated by hddm-c is able to read any hddm binary file that
 *    was written using the same hddm class, ie. the <HDDM class="x">
 *    document tags must be a non-colliding set (see matching rules).
 */

#include <util/PlatformUtils.hpp>
#include <sax/SAXException.hpp>
#include <sax/SAXParseException.hpp>
#include <parsers/DOMParser.hpp>
#include <dom/DOM_DOMException.hpp>
#include <dom/DOM_NamedNodeMap.hpp>

#include "hddm-c.hpp"

#include <assert.h>
#include <fstream.h>
#include <string.h>
#include <ctype.h>
#include <stdlib.h>
#include <stdio.h>

char* hFilename = 0;
ofstream hFile;
ofstream cFile;

char* classPrefix;
int tagListLength = 0;
DOM_Element* tagList[100000];
bool verifyOnly = false;

void usage()
{
   cerr << "\nUsage:\n"
        << "    hddm-c [-v | -o <filename>] {HDDM file}\n\n"
        << "Options:\n"
        <<  "    -v			validate only\n"
        <<  "    -o <filename>	write to <filename>.h"
        << endl;
}

/* Generate the plural form of a noun */

char* plural(char* str)
{
   int len = strlen(str);
   char* p = new char [len+10];
   strcpy(p,str);
   if ((len > 3) && (strcmp(&p[len-3],"tum")  == 0))
   {
      strcpy(&p[len-3],"ta");
   }
   else if ((len > 2) && (strcmp(&p[len-2],"ex")  == 0))
   {
      strcpy(&p[len-2],"ices");
   }
   else if ((len > 2) && (strcmp(&p[len-2],"sh")  == 0))
   {
      strcpy(&p[len-2],"shes");
   }
   else if ((len > 1) && (strcmp(&p[len-1],"s")  == 0))
   {
      strcpy(&p[len-1],"ses");
   }
   else if (len > 1)
   {
      strcat(p,"s");
   }
   return p;
}

/* Map from tag name to name of the corresponding c-structure
   for the case of tags without content elements              */

char* basicStructType(char* tag)
{
   int len = strlen(tag) + strlen(classPrefix);
   char* p = new char [len + 10];
   char* q = new char [len];
   strcpy(q,tag);
   q[0] = toupper(q[0]);
   sprintf(p,"%s_%s_t",classPrefix,q);
   delete [] q;
   return p;
}

/* Map from tag name to name of the corresponding c-structure
   for the case of tags with content elements                 */

char* containerStructType(char* tag)
{
   int len = strlen(tag) + strlen(classPrefix);
   char* p = new char [len + 10];
   char* tags = plural(tag);
   tags[0] = toupper(tags[0]);
   sprintf(p,"%s_%s_t",classPrefix,tags);
   delete [] tags;
   return p;
}

/* Verify that the tag group under this element does not collide
   with existing tag group t, otherwise exit with fatal error    */

void checkConsistency(DOM_Element& el, int t)
{
   char* tagStr = el.getTagName().transcode();
   DOM_NamedNodeMap oldAttr = tagList[t]->getAttributes();
   DOM_NamedNodeMap newAttr = el.getAttributes();
   int listLength = oldAttr.getLength();
   if (newAttr.getLength() != listLength)
   {
      cerr << "hddm-c error: inconsistent usage of tag "
           << "\"" << tagStr << "\" in xml document." << endl;
      exit(1);
   }
   for (int n = 0; n < listLength; n++)
   {
      DOMString nameS = oldAttr.item(n).getNodeName();
      char* name = nameS.transcode();
      DOMString oldS = tagList[t]->getAttribute(name);
      DOMString newS = el.getAttribute(name);
      if (! newS.equals(oldS))
      {
         cerr << "hddm-c error: inconsistent usage of attribute "
              << "\"" << name << "\" in tag "
              << "\"" << tagStr << "\" in xml document." << endl;
         exit(1);
      }
      delete [] name;
   }
   DOM_NodeList oldList = tagList[t]->getChildNodes();
   DOM_NodeList newList = el.getChildNodes();
   listLength = oldList.getLength();
   if (newList.getLength() != listLength)
   {
      cerr << "hddm-c error: inconsistent usage of tag "
           << "\"" << tagStr << "\" in xml document." << endl;
   exit(1);
   }
   for (int n = 0; n < listLength; n++)
   {
      DOM_Node cont = oldList.item(n);
      DOMString name = cont.getNodeName();
      short type = cont.getNodeType();
      if (type == ELEMENT_NODE)
      {
         DOM_NodeList contList = el.getElementsByTagName(name);
         if (contList.getLength() != 1)
         {
             cerr << "hddm-c error: inconsistent usage of tag "
                  << "\"" << tagStr << "\" in xml document." << endl;
             exit(1);
         }
      }
   }
   delete [] tagStr;
}

/* Write declaration of c-structure for this tag to c-header file */

void writeHeader(DOM_Element& el)
{
   char* tagStr = el.getTagName().transcode();
   char* ctypeDef = basicStructType(tagStr);
   hFile << endl
	 << "#ifndef SAW_" << ctypeDef 				<< endl
	 << "#define SAW_" << ctypeDef				<< endl
								<< endl
	 << "typedef struct {"					<< endl;

   DOM_NamedNodeMap varList = el.getAttributes();
   int varCount = varList.getLength();
   for (int v = 0; v < varCount; v++)
   {
      DOM_Node var = varList.item(v);
      DOMString typeS = var.getNodeValue();
      char* name = var.getNodeName().transcode();
      if (typeS.equals("int"))
      {
         hFile << "   int                  " << name << ";" << endl;
      }
      else if (typeS.equals("float"))
      {
         hFile << "   float                " << name << ";" << endl;
      }
      else if (typeS.equals("double"))
      {
         hFile << "   double               " << name << ";" << endl;
      }
      else if (typeS.equals("bool"))
      {
         hFile << "   int                  " << name << ";" << endl;
      }
      else if (typeS.equals("Particle_t"))
      {
         hFile << "   Particle_t           " << name << ";" << endl;
      }
      else
      {
         /* ignore attributes with unrecognized values */
      }
      delete [] name;
   }

   DOM_NodeList contList = el.getChildNodes();
   int contLength = contList.getLength();
   for (int c = 0; c < contLength; c++)
   {
      DOM_Node cont = contList.item(c);
      short type = cont.getNodeType();
      char* name = cont.getNodeName().transcode();
      if (type == ELEMENT_NODE)
      {
         DOM_Element contEl = (DOM_Element&) cont;
         DOMString rep = contEl.getAttribute("repeat");
         char* ctypeRef = (rep == 0) ? basicStructType(name) :
                                       containerStructType(name);

         hFile << "   " << ctypeRef << "*";
         for (int i = 0; i < 20-strlen(ctypeRef); i++)
         {
            hFile << " ";
         }
         char* names = plural(name);
         hFile <<  ((rep == 0) ? name : names) << ";" << endl;
         delete [] ctypeRef;
         delete [] names;
      }
      delete [] name;
   }

   hFile << "} " << ctypeDef << ";" << endl;

   DOMString rep = el.getAttribute("repeat");
   if (rep != 0)
   {
      char* ctypeRef = containerStructType(tagStr);
      hFile << endl << "typedef struct {" << endl
            << "   int mult;" << endl
            << "   " << ctypeDef << " in[1];" << endl
            << "} " << ctypeRef << ";" << endl;
      delete [] ctypeRef;
   }

   hFile << "#endif /* " << ctypeDef << " */" 			<< endl;
   delete [] tagStr;
}

/* Generate c-structure declarations for this tag and its descendants;
   this function calls itself recursively                              */

int constructGroup(DOM_Element& el)
{
   DOMString tagS = el.getTagName();
   int t;
   for (t = 0; t < tagListLength; t++)
   {
      if (tagS.equals(tagList[t]->getTagName()))
      {
         checkConsistency(el,t);
         return t;
      }
   }

   tagList[t] = new DOM_Element(el);
   tagListLength++;

   DOM_NodeList contList = el.getChildNodes();
   int contLength = contList.getLength();
   for (int c = 0; c < contLength; c++)
   {
      DOM_Node cont = contList.item(c);
      short type = cont.getNodeType();
      if (type == ELEMENT_NODE)
      {
         DOM_Element contEl = (DOM_Element&) cont;
         constructGroup(contEl);
      }
   }

   writeHeader(el);
   return t;
}

/* Generate c code for make_<class letter>_<group name> functions */

void constructMakeFuncs()
{
   for (int t = 0; t < tagListLength; t++)
   {
      DOM_Element tagEl = *tagList[t];
      char* tagStr = tagEl.getTagName().transcode();
      char* containerType = containerStructType(tagStr);
      char* basicType = basicStructType(tagStr);

      hFile << endl;
      cFile << endl;

      DOMString rep = tagEl.getAttribute("repeat");
      if (rep != 0)
      {
         hFile << containerType << "* ";
         cFile << containerType << "* ";
         char containerT[500];
         strncpy(containerT,containerType,500);
         char* term = rindex(containerT,'_');
         *term = 0;
         hFile << "make_" << containerT;
         cFile << "make_" << containerT;
         hFile << "(int n);" 					<< endl;
         cFile << "(int n)" 					<< endl
               << "{"						<< endl
               << "   int rep = (n > 1) ? n-1 : 0;"		<< endl
               << "   int size = sizeof(" << containerType
               << ") + rep * sizeof(" << basicType << ");"	<< endl
               << "   " << containerType
               << "* p = CALLOC(size,\""
               << containerType << "\");"			<< endl;
      }
      else
      {
         hFile << basicType << "* ";
         cFile << basicType << "* ";
         char basicT[500];
         strncpy(basicT,basicType,500);
         char* term = rindex(basicT,'_');
         *term = 0;
         hFile << "make_" << basicT;
         cFile << "make_" << basicT;
         hFile << "();"	 					<< endl;
         cFile << "()"	 					<< endl
               << "{"						<< endl
               << "   int size = sizeof(" << basicType << ");"	<< endl
               << "   " << basicType << "* p = CALLOC(size,\""
               << basicType << "\");"				<< endl;
      }
      cFile << "   return p;"					<< endl
            << "}"						<< endl;

      delete [] containerType;
      delete [] basicType;
      delete [] tagStr;
   }
}

/* Generate c functions for unpacking binary stream into c-structures */

void constructUnpackers()
{
   cFile 							<< endl
         << "inline static int unpack_int"
         << "(" << classPrefix << "_iostream_t* fp)"		<< endl
         << "{"							<< endl
         << "   return *(int*)(fp->bp++);"			<< endl
         << "}"							<< endl
								<< endl
         << "inline static float unpack_float"
         << "(" << classPrefix << "_iostream_t* fp)"		<< endl
         << "{"							<< endl
         << "   return *(float*)(fp->bp++);"			<< endl
         << "}"							<< endl
								<< endl
         << "inline static double unpack_double"
         << "(" << classPrefix << "_iostream_t* fp)"		<< endl
         << "{"							<< endl
         << "   double dd;"					<< endl
         << "   int* p = (int*) &dd;"				<< endl
         << "   p[0] = *(int*)(fp->bp++);"			<< endl
         << "   p[1] = *(int*)(fp->bp++);"			<< endl
         << "   return dd;"					<< endl
         << "}"							<< endl;

   for (int t = 0; t < tagListLength; t++)
   {
      DOM_Element tagEl = *tagList[t];
      char* tagStr = tagEl.getTagName().transcode();
      char* containerType = containerStructType(tagStr);
      char* basicType = basicStructType(tagStr);

      cFile << endl << "static ";

      char* tagType;
      DOMString rep = tagEl.getAttribute("repeat");
      if (rep != 0)
      {
         tagType = containerType;
      }
      else
      {
         tagType = basicType;
      }
      char tagT[500];
      strncpy(tagT,tagType,500);
      char* term = rindex(tagT,'_');
      *term = 0;
      cFile << tagType << "* unpack_" << tagT
            << "(" << classPrefix << "_iostream_t* fp, popNode* pop)"
								<< endl
            << "{"						<< endl
            << "   " << tagType << "* this = 0;"		<< endl
            << "   int size = unpack_int(fp);"			<< endl
            << "   int* bpEnd = fp->bp + size;"			<< endl
            << "   if (size > 0)"				<< endl
            << "   {"						<< endl;

      if (rep != 0)
      {
         cFile << "      int m;"				<< endl
               << "      int mult = unpack_int(fp);"		<< endl
               << "      this = make_" << tagT << "(mult);"	<< endl
               << "      this->mult = mult;"			<< endl
               << "      for (m = 0; m < mult; m++ )"		<< endl
               << "      {"					<< endl;
      }
      else
      {
         cFile << "      this = make_" << tagT << "();"		<< endl
               << "      {"					<< endl;
      }

      int hasContents = 0;
      DOM_NodeList contList = tagEl.getChildNodes();
      for (int c = 0; c < contList.getLength(); c++)
      {
         DOM_Node cont = contList.item(c);
         short type = cont.getNodeType();
         if (type == ELEMENT_NODE)
         {
            hasContents = 1;
            DOM_Element contEl = (DOM_Element&) cont;
            char* name = contEl.getTagName().transcode();
            DOMString re = contEl.getAttribute("repeat");
            char* names = plural(name);
            cFile << "         int p;"				<< endl
                  << "         void* (*ptr) = (void**) &this->"
                  << ((rep == 0) ? "" : "in[m].")
                  << ((re == 0) ? name : names) << ";"		<< endl;
            delete [] names;
            delete [] name;
            break;
         }
      }

      DOM_NamedNodeMap attList = tagEl.getAttributes();
      for (int a = 0; a < attList.getLength(); a++)
      {
         DOM_Node att = attList.item(a);
         DOMString typeS = att.getNodeValue();
         char* name = att.getNodeName().transcode();
         char nameStr[500];
         if (rep != 0)
         {
            sprintf(nameStr,"in[m].%s",name);
         }
         else
         {
            sprintf(nameStr,"%s",name);
         }
         if (typeS.equals("int"))
         {
            cFile << "         this->" << nameStr
                  << " = unpack_int(fp);"			<< endl;
         }
         else if (typeS.equals("float"))
         {
            cFile << "         this->" << nameStr
                  << " = unpack_float(fp);"			<< endl;
         }
         else if (typeS.equals("double"))
         {
            cFile << "         this->" << nameStr
                  << " = unpack_double(fp);"		<< endl;
         }
         else if (typeS.equals("bool"))
         {
            cFile << "         this->" << nameStr
                  << " = unpack_int(fp);"			<< endl;
         }
         else if (typeS.equals("Particle_t"))
         {
            cFile << "         this->" << nameStr
                  << " = unpack_int(fp);"			<< endl;
         }
         else
         {
            /* ignore attributes with unrecognized values */
         }
         delete [] name;
      }

      if (hasContents)
      {
         cFile << "         for (p = 0; p < pop->popListLength; p++)"	<< endl
               << "         {"						<< endl
               << "            popNode* pnode = pop->popList[p];"	<< endl
               << "            if (pnode)"				<< endl
               << "            {"					<< endl
               << "               int kid = pnode->inParent;"		<< endl
               << "               ptr[kid] = pnode->unpacker(fp,pnode);"<< endl
               << "            }"					<< endl
               << "            else"					<< endl
               << "            {"					<< endl
               << "               int skip = unpack_int(fp);"		<< endl
               << "               fp->bp += skip;"			<< endl
               << "            }"					<< endl
               << "         }"						<< endl;
      }
      cFile << "      }"						<< endl
            << "   }"							<< endl
            << "   fp->bp = bpEnd;"					<< endl
            << "   return this;"					<< endl
            << "}"							<< endl;
   }
}
 
/* Generate c functions to read from binary stream into c-structures */

void constructReadFunc(DOM_Element topEl)
{
   char* topStr = topEl.getTagName().transcode();
   char* topType = basicStructType(topStr);
   char topT[500];
   strncpy(topT,topType,500);
   char* term = rindex(topT,'_');
   *term = 0;

#define MAX_POPLIST_LENGTH 99

   hFile 								<< endl
	 << "#ifndef HDDM_STREAM_INPUT"					<< endl
	 << "#define HDDM_STREAM_INPUT -91"				<< endl
	 << "#define HDDM_STREAM_OUTPUT -92"				<< endl
           								<< endl
	 << "struct popNode_s {"					<< endl
         << "   void* (*unpacker)();"					<< endl
         << "   int inParent;"						<< endl
         << "   int popListLength;"					<< endl
         << "   struct popNode_s* popList[" << MAX_POPLIST_LENGTH << "];"
									<< endl
         << "};"							<< endl
         << "typedef struct popNode_s popNode;"				<< endl
                                                                	<< endl
	 << "typedef struct {"						<< endl
	 << "   FILE* fd;"						<< endl
	 << "   int iomode;"						<< endl
	 << "   char* hddm;"						<< endl
	 << "   char* filename;"					<< endl
         << "   int* bp;"						<< endl
	 << "   popNode* popTop;"					<< endl
	 << "} " << classPrefix << "_iostream_t;"			<< endl
									<< endl
	 << "#endif /* HDDM_STREAM_INPUT */"				<< endl;

   constructUnpackers();

   hFile								<< endl
	 << topType << "* read_" << topT
	 << "(" << classPrefix << "_iostream_t* fp" << ");"		<< endl;
   cFile								<< endl
	 << topType << "* read_" << topT
	 << "(" << classPrefix << "_iostream_t* fp" << ")"		<< endl
	 << "{"								<< endl
	 << "   " << topType << "* this = 0;"				<< endl
	 << "   int ret = 0;"						<< endl
	 << "   int* buff = malloc(1000000);"				<< endl
									<< endl
	 << "   if (fp && (fp->iomode == HDDM_STREAM_INPUT))"		<< endl
	 << "   {"							<< endl
	 << "      ret = fread(buff,sizeof(int),1,fp->fd);"		<< endl
	 << "   }"							<< endl
	 << "   if (ret)"						<< endl
	 << "   {"							<< endl
	 << "      ret = *buff;"					<< endl
	 << "      ret -= fread(&buff[1],sizeof(int),ret,fp->fd);"	<< endl
	 << "   }"							<< endl
	 << "   else"							<< endl
	 << "   {"							<< endl
	 << "      free(buff);"						<< endl
	 << "      return 0;"						<< endl
	 << "   }"							<< endl
	 << "   if (ret == 0)"						<< endl
	 << "   {"							<< endl
	 << "      fp->bp = buff;"					<< endl
	 << "      this = unpack_" << topT << "(fp, fp->popTop);"	<< endl
	 << "   }"							<< endl
	 << "   free(buff);"						<< endl
	 << "   return this;"						<< endl
	 << "}"								<< endl;
   delete [] topType;
   delete [] topStr;
}

/* Generate c functions for packing c-structures onto a binary stream
   and deleting them from memory when output is complete              */

void constructPackers()
{
   cFile							<< endl
         << "inline static void pack_int"
         << "(" << classPrefix << "_iostream_t* fp, int val)"	<< endl
         << "{"							<< endl
         << "   *(int*)(fp->bp++) = val;"			<< endl
         << "}"							<< endl
								<< endl
         << "inline static void pack_float"
         << "(" << classPrefix << "_iostream_t* fp, float val)"	<< endl
         << "{"							<< endl
         << "   *(float*)(fp->bp++) = val;"			<< endl
         << "}"							<< endl
								<< endl
         << "inline static void pack_double"
         << "(" << classPrefix << "_iostream_t* fp, double val)"<< endl
         << "{"							<< endl
         << "   int* p = (int*)&val;"				<< endl
         << "   *(fp->bp++) = p[0];"				<< endl
         << "   *(fp->bp++) = p[1];"				<< endl
         << "}"							<< endl;

   cFile << endl;
   for (int t = 0; t < tagListLength; t++)
   {
      DOM_Element tagEl = *tagList[t];
      char* tagStr = tagList[t]->getTagName().transcode();
      char* containerType = containerStructType(tagStr);
      char* basicType = basicStructType(tagStr);

      cFile << "static ";

      char* tagType;
      DOMString rep = tagEl.getAttribute("repeat");
      if (rep != 0)
      {
         tagType = containerType;
      }
      else
      {
         tagType = basicType;
      }
      char tagT[500];
      strncpy(tagT,tagType,500);
      char* term = rindex(tagT,'_');
      *term = 0;
      cFile << "int pack_" << tagT
            << "(" << classPrefix << "_iostream_t* fp,"
            << tagType << "* this);"				<< endl;
   }

   for (int t = 0; t < tagListLength; t++)
   {
      DOM_Element tagEl = *tagList[t];
      char* tagStr = tagList[t]->getTagName().transcode();
      char* containerType = containerStructType(tagStr);
      char* basicType = basicStructType(tagStr);

      cFile << endl << "static ";

      char* tagType;
      DOMString rep = tagEl.getAttribute("repeat");
      if (rep != 0)
      {
         tagType = containerType;
      }
      else
      {
         tagType = basicType;
      }
      char tagT[500];
      strncpy(tagT,tagType,500);
      char* term = rindex(tagT,'_');
      *term = 0;
      cFile << "int pack_" << tagT
            << "(" << classPrefix << "_iostream_t* fp,"
            << tagType << "* this)"				<< endl
            << "{"						<< endl
            << "   int* bpStart = fp->bp++;"			<< endl
            << "   int* bpEnd;"					<< endl
            << "   int wcount;"					<< endl;

      if (rep != 0)
      {
         cFile << "   int m;"					<< endl
               << "   pack_int(fp,this->mult);"			<< endl
               << "   for (m = 0; m < this->mult; m++)"		<< endl
               << "   {"					<< endl;
      }
      else
      {
         cFile << "   {"					<< endl;
      }

      DOM_NamedNodeMap attList = tagEl.getAttributes();
      for (int a = 0; a < attList.getLength(); a++)
      {
         DOM_Node att = attList.item(a);
         DOMString typeS = att.getNodeValue();
         char* name = att.getNodeName().transcode();
         char nameStr[500];
         if (rep != 0)
         {
            sprintf(nameStr,"in[m].%s",name);
         }
         else
         {
            sprintf(nameStr,"%s",name);
         }
         if (typeS.equals("int"))
         {
            cFile << "      pack_int(fp,this->" << nameStr << ");"	<< endl;
         }
         else if (typeS.equals("float"))
         {
            cFile << "      pack_float(fp,this->" << nameStr << ");"	<< endl;
         }
         else if (typeS.equals("double"))
         {
            cFile << "      pack_double(fp,this->" << nameStr << ");"	<< endl;
         }
         else if (typeS.equals("bool"))
         {
            cFile << "      pack_int(fp,this->" << nameStr << ");"	<< endl;
         }
         else if (typeS.equals("Particle_t"))
         {
            cFile << "      pack_int(fp,this->" << nameStr << ");"	<< endl;
         }
         else
         {
            /* ignore attributes with unrecognized values */
         }
         delete [] name;
      }

      DOM_NodeList contList = tagEl.getChildNodes();
      for (int c = 0; c < contList.getLength(); c++)
      {
         DOM_Node cont = contList.item(c);
         short type = cont.getNodeType();
         if (type == ELEMENT_NODE)
         {
            DOM_Element contEl = (DOM_Element&) cont;
            char* name = contEl.getTagName().transcode();
            char* containerType = containerStructType(name);
            char* basicType = basicStructType(name);
            DOMString re = contEl.getAttribute("repeat");
            char* names = plural(name);
            char* contType;
            if (re != 0)
            {
               contType = containerType;
            }
            else
            {
               contType = basicType;
            }
            char contT[500];
            strncpy(contT,contType,500);
            char* term = rindex(contT,'_');
            *term = 0;
            cFile << "      if (this->"
                  << ((rep == 0)? "" : "in[m].")
                  << ((re == 0)? name : names) << ")"			<< endl
                  << "      {"						<< endl
                  << "         pack_" << contT << "(fp,this->"
                  << ((rep == 0)? "" : "in[m].")
                  << ((re == 0)? name : names) << ");"			<< endl
                  << "      }"						<< endl
                  << "      else"					<< endl
                  << "      {"						<< endl
                  << "         pack_int(fp,0);"				<< endl
                  << "      }"						<< endl;
            delete [] containerType;
            delete [] basicType;
            delete [] names;
            delete [] name;
         }
      }

      cFile << "   }"							<< endl
            << "   FREE(this);"						<< endl
            << "   bpEnd = fp->bp;"					<< endl
            << "   wcount = bpEnd - bpStart -1;"			<< endl
            << "   fp->bp = bpStart;"					<< endl
            << "   pack_int(fp,wcount);"				<< endl
            << "   fp->bp = bpEnd;"					<< endl
            << "   return wcount;"					<< endl
            << "}"							<< endl;
      delete [] containerType;
      delete [] basicType;
      delete [] tagStr;
   }
}

/* Generate c functions for exporting c-structures onto a binary stream */
 
void constructFlushFunc(DOM_Element& el)
{
   DOM_Element topEl = *tagList[0];
   char* topStr = topEl.getTagName().transcode();
   char* topType = basicStructType(topStr);
   char topT[500];
   strncpy(topT,topType,500);
   char* term = rindex(topT,'_');
   *term = 0;

   constructPackers();

   hFile 							<< endl
	 << "int flush_" << topT << "(" << topType << "* this,"
	 << classPrefix << "_iostream_t* fp" << ");"		<< endl;
   cFile 							<< endl
	 << "int flush_" << topT << "(" << topType << "* this,"
	 << classPrefix << "_iostream_t* fp" << ")"		<< endl
	 << "{"							<< endl
	 << "   int ret;"					<< endl
         << "   if (this == 0)"					<< endl
         << "   {"						<< endl
	 << "      ret = 0;"					<< endl
         << "   }"						<< endl
         << "   else"						<< endl
         << "   {"						<< endl
	 << "      int* buff = malloc(1000000);"		<< endl
         << "      " << classPrefix << "_iostream_t myfp;"	<< endl
         << "      myfp.bp = buff;"				<< endl
	 << "      pack_" << topT << "(&myfp,this);"		<< endl
	 << "      if (fp == 0)"				<< endl
         << "      {"						<< endl
         << "         ret = 0;"					<< endl
         << "      }"						<< endl
         << "      else if (fp->iomode == HDDM_STREAM_OUTPUT)"	<< endl
	 << "      {"						<< endl
	 << "         ret = fwrite"
         << "(buff,sizeof(int),*buff+1,fp->fd);"		<< endl
	 << "      }"						<< endl
	 << "      else"					<< endl
	 << "      {"						<< endl
         << "         ret = -1;"				<< endl
	 << "      }"						<< endl
	 << "      free(buff);"					<< endl
	 << "   }"						<< endl
	 << "   return ret;"					<< endl
	 << "}"							<< endl;
   delete [] topType;
   delete [] topStr;
}

/* Generate c functions that construct match up corresponding elements
   between the c structures and the data model the appears on the input
   binary stream.  If successful, these routines build a hierarchical
   structure (the "pop tree") that gives directions to the unpackers.

   The matching rules are as follows:

    1) The attribute list for any given tag must be identical in content
       and order wherever it appears, otherwise there is a collision.

    2) The content list for any given tag must be internally consistent
       within each model, but there are no requirements for agreement
       between the c-structures and the binary stream models.  Only the
       contents which appear in both models will be unpacked, however.
*/

void writeMatcher()
{
   cFile							<< endl
	 << "static int getTag(char* d, char* tag)"		<< endl
	 << "{"							<< endl
	 << "   int level;"					<< endl
	 << "   char line[500];"				<< endl
	 << "   strncpy(line,d,500);"				<< endl
	 << "   line[499] = 0;"					<< endl
	 << "   level = strlen(strtok(line,\"<\"));"		<< endl
	 << "   strncpy(tag,strtok(NULL,\" >\"),500);"		<< endl
	 << "   return level/2;"				<< endl
	 << "}"							<< endl
   								<< endl
	 << "static char* getEndTag(char* d, char* tag)"	<< endl
	 << "{"							<< endl
	 << "   char line[500];"				<< endl
	 << "   char endTag[510];"				<< endl
	 << "   strncpy(line,d,500);"				<< endl
	 << "   line[499] = 0;"					<< endl
         << "   if (strstr(strtok(line,\"\\n\"),\"/>\") == 0)"	<< endl
	 << "   {"						<< endl
	 << "      sprintf(endTag,\"</%s>\",tag);"		<< endl
	 << "   }"						<< endl
	 << "   else"						<< endl
	 << "   {"						<< endl
         << "      strcpy(endTag,\"/>\");"			<< endl
	 << "   }"						<< endl
	 << "   return strstr(d,endTag);"			<< endl
	 << "}"							<< endl
        							<< endl
	 << "static void collide(char* tag)"			<< endl
	 << "   {"						<< endl
	 << "      fprintf(stderr,\"HDDM Error: \");"		<< endl
	 << "      fprintf(stderr,\"input file data model for tag \");"	<< endl
	 << "      fprintf(stderr,\"%s does not match c code.\", tag);"	<< endl
	 << "      fprintf(stderr,\"Please recompile.\\n\");"	<< endl
	 << "      exit(9);"					<< endl
	 << "   }"						<< endl
								<< endl
	 << "static popNode* matches(char* b, char* c)"		<< endl
	 << "{"							<< endl
	 << "   char btag[500];"				<< endl
	 << "   char ctag[500];"				<< endl
	 << "   int blevel, clevel;"				<< endl
         << "   int ptrSeqNo = 0;"				<< endl
	 << "   blevel = getTag(b,btag);"			<< endl
	 << "   while ((clevel = getTag(c,ctag)) == blevel)"	<< endl
	 << "   {"						<< endl
	 << "      if "
	 << "((clevel == blevel) && (strcmp(ctag,btag) == 0))"	<< endl
	 << "      {"						<< endl
         << "         popNode* this = malloc(sizeof(popNode));"	<< endl
	 << "         int len = index(c+1,'\\n') - c;"		<< endl
	 << "         if (strncmp(c,b,len) != 0)"		<< endl
	 << "         {"					<< endl
         << "            collide(btag);"			<< endl
	 << "         }"					<< endl;

   int firstTag = 1;
   for (int t = 0; t < tagListLength; t++)
   {
      char* tagStr = tagList[t]->getTagName().transcode();
      DOMString rep = tagList[t]->getAttribute("repeat");
      char* tagType;
      if (rep != 0)
      {
         tagType = containerStructType(tagStr);
      }
      else
      {
         tagType = basicStructType(tagStr);
      }
      char tagT[500];
      strncpy(tagT,tagType,500);
      char* term = rindex(tagT,'_');
      *term = 0;

      if (firstTag)
      {
         firstTag = 0;
         cFile << "         if ";
      }
      else
      {
         cFile << "         else if ";
      }
      cFile << "(strcmp(btag,\"" << tagStr << "\") == 0)"	<< endl
            << "         {"					<< endl
	    << "            this->unpacker = "
	    << "(void*) unpack_" << tagT << ";"			<< endl
            << "         }"					<< endl;
   }

   cFile << "         else"					<< endl
	 << "         {"					<< endl
         << "            collide(btag);"			<< endl
	 << "         }"					<< endl
         << "         this->inParent = ptrSeqNo;"		<< endl
         << "         this->popListLength = 0;"			<< endl
	 << "         c = index(c+1,'\\n');"			<< endl
	 << "         b = index(b+1,'\\n');"			<< endl
	 << "         while (getTag(b,btag) > blevel)"		<< endl
	 << "         {"					<< endl
         << "            this->popList[this->popListLength++] = matches(b,c);"
								<< endl 
         << "            if (this->popListLength > "
         << MAX_POPLIST_LENGTH << ")"				<< endl
         << "            {"					<< endl
         << "               fprintf(stderr,"
         << "\"hddm error - posList overflow.\\n\");"		<< endl
         << "               fprintf(stderr,"
         << "\"Increase MAX_POPLIST_LENGTH and recompile.\\n\");" << endl
         << "               exit(9);"				<< endl
         << "            }"					<< endl
	 << "            b = getEndTag(b,btag);"		<< endl
	 << "            b = index(b+1,'\\n');"			<< endl
	 << "         }"					<< endl
	 << "         return this;"				<< endl
	 << "      }"						<< endl
	 << "      else"					<< endl
	 << "      {"						<< endl
	 << "         c = getEndTag(c,ctag);"			<< endl
	 << "         c = index(c+1,'\\n');"			<< endl
	 << "         ++ptrSeqNo;"				<< endl
	 << "      }"						<< endl
	 << "   }"						<< endl
	 << "   return 0;"					<< endl
	 << "}"							<< endl;
}

void constructOpenFunc(DOM_Element& el)
{
   char* tagStr = el.getTagName().transcode();
   char* tagType = basicStructType(tagStr);
   char tagT[500];
   strncpy(tagT,tagType,500);
   char* term = rindex(tagT,'_');
   *term = 0;
   hFile							<< endl
	 << classPrefix << "_iostream_t* "
	 << "open_" << tagT << "(char* filename);"		<< endl;

   writeMatcher();

   cFile							<< endl
	 << classPrefix << "_iostream_t* "
	 << "open_" << tagT << "(char* filename)"		<< endl
	 << "{"							<< endl
	 << "   " << classPrefix << "_iostream_t* fp = "
	 << "malloc(sizeof(" << classPrefix << "_iostream_t));"	<< endl
	 << "   char* p;"					<< endl
         << "   if (filename)"					<< endl
         << "   {"						<< endl
	 << "      fp->fd = fopen(filename,\"r\");"		<< endl
         << "   }"						<< endl
         << "   else"						<< endl
         << "   {"						<< endl
	 << "      fp->fd = fdopen(0,\"r\");"			<< endl
         << "   }"						<< endl
	 << "   if (fp->fd == 0)"				<< endl
	 << "   {"						<< endl
	 << "      free(fp);"					<< endl
	 << "      return 0;"					<< endl
	 << "   }"						<< endl
	 << "   fp->iomode = HDDM_STREAM_INPUT;"		<< endl
	 << "   fp->hddm = malloc(1000000);"			<< endl
	 << "   p = fp->hddm;"					<< endl
	 << "   *p = 0;"					<< endl
	 << "   while (strcmp(p,\"</HDDM>\\n\") != 0)"		<< endl
	 << "   {"						<< endl
	 << "      int len = strlen(fp->hddm);"			<< endl
	 << "      if (len < 990000)"				<< endl
	 << "      {"						<< endl
	 << "         p = fp->hddm + len;"			<< endl
	 << "         fgets(p,10000,fp->fd);"			<< endl
	 << "      }"						<< endl
	 << "      else"					<< endl
	 << "      {"						<< endl
	 << "         break;"					<< endl
	 << "      }"						<< endl
	 << "   }"						<< endl
	 << "   fp->popTop = matches(fp->hddm,HDDM_" << classPrefix
	 << "_DocumentString);"					<< endl
         << "   if (fp->popTop == 0)"				<< endl
	 << "   {"						<< endl
	 << "      fprintf(stderr,\"HDDM Error: \");"		<< endl
	 << "      fprintf(stderr,\"input file data model \");"	<< endl
	 << "      fprintf(stderr,\"does not match c code.\");"	<< endl
	 << "      fprintf(stderr,\"  Please recompile.\\n\");"	<< endl
	 << "      exit(9);"					<< endl
	 << "   }"						<< endl
	 << "   fp->filename = malloc(strlen(filename) + 1);"	<< endl
	 << "   strcpy(fp->filename,filename);"			<< endl
         << "   fp->bp = 0;"					<< endl
	 << "   return fp;"					<< endl
	 << "}"							<< endl;
   delete [] tagStr;
   delete [] tagType;
}

void constructInitFunc(DOM_Element& el)
{
   char* tagStr = el.getTagName().transcode();
   char* tagType = basicStructType(tagStr);
   char tagT[500];
   strncpy(tagT,tagType,500);
   char* term = rindex(tagT,'_');
   *term = 0;
   hFile							<< endl
	 << classPrefix << "_iostream_t* "
	 << "init_" << tagT << "(char* filename);"		<< endl;
   cFile							<< endl
	 << classPrefix << "_iostream_t* "
	 << "init_" << tagT << "(char* filename)"		<< endl
	 << "{"							<< endl
	 << "   int len;"					<< endl	
	 << "   " << classPrefix << "_iostream_t* fp = "
	 << "malloc(sizeof(" << classPrefix << "_iostream_t));"	<< endl
         << "   if (filename)"					<< endl
         << "   {"						<< endl
	 << "      fp->fd = fopen(filename,\"w\");"		<< endl
         << "   }"						<< endl
         << "   else"						<< endl
         << "   {"						<< endl
	 << "      fp->fd = fdopen(1,\"w\");"			<< endl
         << "   }"						<< endl
	 << "   if (fp->fd == 0)"				<< endl
	 << "   {"						<< endl
	 << "      free(fp);"					<< endl
	 << "      return 0;"					<< endl
	 << "   }"						<< endl
	 << "   fp->iomode = HDDM_STREAM_OUTPUT;"		<< endl
	 << "   len = strlen(HDDM_" 
	 << classPrefix << "_DocumentString);"			<< endl
	 << "   fp->hddm = malloc(len + 1);"			<< endl
	 << "   strcpy(fp->hddm,HDDM_"
	 << classPrefix << "_DocumentString);"			<< endl
	 << "   if (fwrite(fp->hddm,1,len,fp->fd) != len)"	<< endl
	 << "   {"						<< endl
	 << "      fprintf(stderr,\"HDDM Error: \");"		<< endl
	 << "      fprintf(stderr,\"error writing to \");"	<< endl
	 << "      fprintf(stderr,\"output file %s\\n\",filename);" << endl
	 << "      exit(9);"					<< endl
	 << "   }"						<< endl
	 << "   fp->filename = malloc(strlen(filename) + 1);"	<< endl
	 << "   strcpy(fp->filename,filename);"			<< endl
         << "   fp->popTop = 0;"				<< endl
         << "   fp->bp = 0;"					<< endl
	 << "   return fp;"					<< endl
	 << "}"							<< endl;
   delete [] tagStr;
   delete [] tagType;
}

void constructCloseFunc(DOM_Element& el)
{
   char* tagStr = el.getTagName().transcode();
   char* tagType = basicStructType(tagStr);
   char tagT[500];
   strncpy(tagT,tagType,500);
   char* term = rindex(tagT,'_');
   *term = 0;
   hFile							<< endl
	 << "void close_" << tagT << "("
	 << classPrefix << "_iostream_t* fp);"			<< endl;
   cFile							<< endl
         << "void popaway(popNode* p)"				<< endl
         << "{"							<< endl
         << "   if (p)"						<< endl
         << "   {"						<< endl
         << "      int n;"					<< endl
         << "      for (n = 0; n < p->popListLength; n++)"	<< endl
         << "      {"						<< endl
         << "         popaway(p->popList[n]);"			<< endl
         << "      }"						<< endl
         << "      free(p);"					<< endl
         << "   }"						<< endl
         << "}"							<< endl
								<< endl
	 << "void close_" << tagT
	 << "(" << classPrefix << "_iostream_t* fp)"		<< endl
	 << "{"							<< endl
	 << "   fclose(fp->fd);"				<< endl	
	 << "   free(fp->hddm);"				<< endl	
	 << "   free(fp->filename);"				<< endl	
         << "   popaway(fp->popTop);"				<< endl
	 << "   free(fp);"					<< endl	
	 << "}"							<< endl;
   delete [] tagStr;
   delete [] tagType;
}

void constructDocument(DOM_Element& el)
{
   static int indent = 0;
   cFile << "\"";
   for (int n = 0; n < indent; n++)
   {
      cFile << "  ";
   }
   
   char* tagStr = el.getTagName().transcode();
   cFile << "<" << tagStr;
   DOM_NamedNodeMap attrList = el.getAttributes();
   int attrListLength = attrList.getLength();
   for (int a = 0; a < attrListLength; a++)
   {
      DOM_Node node = attrList.item(a);
      char* name = node.getNodeName().transcode();
      char* value = node.getNodeValue().transcode();
      cFile << " " << name << "=\\\"" << value << "\\\"";
      delete [] name;
      delete [] value;
   }

   DOM_NodeList contList = el.getChildNodes();
   int contListLength = contList.getLength();
   if (contListLength > 0)
   {
      cFile << ">\\n\"" << endl;
      indent++;
      for (int c = 0; c < contListLength; c++)
      {
         DOM_Node node = contList.item(c);
         if (node.getNodeType() == ELEMENT_NODE)
         {
            DOM_Element contEl = (DOM_Element&) node;
            constructDocument(contEl);
         }
      }
      indent--;
      cFile << "\"";
      for (int n = 0; n < indent; n++)
      {
         cFile << "  ";
      }
      cFile << "</" << tagStr << ">\\n\"" << endl;
   }
   else
   {
      cFile << " />\\n\"" << endl;
   }
   delete [] tagStr;
}

int main(int argC, char* argV[])
{
   try
   {
      XMLPlatformUtils::Initialize();
   }
   catch (const XMLException& toCatch)
   {
      cerr << "hddm-c: Error during initialization! :\n"
           << StrX(toCatch.getMessage()) << endl;
      return 1;
   }

   if (argC < 2)
   {
      usage();
      return 1;
   }
   else if ((argC == 2) && (strcmp(argV[1], "-?") == 0))
   {
      usage();
      return 2;
   }

   const char*  xmlFile = 0;
   int argInd;
   for (argInd = 1; argInd < argC; argInd++)
   {
      if (argV[argInd][0] != '-')
      {
         break;
      }
      if (strcmp(argV[argInd],"-v") == 0)
      {
         verifyOnly = true;
      }
      else if (strcmp(argV[argInd],"-o") == 0)
      {
         hFilename = argV[++argInd];
      }
      else
      {
         cerr << "Unknown option \'" << argV[argInd]
              << "\', ignoring it\n" << endl;
      }
   }

   if (argInd != argC - 1)
   {
      usage();
      return 1;
   }
   xmlFile = argV[argInd];

   DOMParser parser;
   parser.setValidationScheme(DOMParser::Val_Never);
   parser.setCreateEntityReferenceNodes(false);
   parser.setDoNamespaces(false);

   MyOwnErrorHandler errorHandler;
   parser.setErrorHandler(&errorHandler);

   try
   {
      parser.parse(xmlFile);
   }
   catch (const XMLException& toCatch)
   {
      cerr << "\nhddm-c: Error during parsing: '" << xmlFile << "'\n"
           << "Exception message is:  \n"
           << StrX(toCatch.getMessage()) << "\n" << endl;
      return -1;
   }
   catch (const DOM_DOMException& toCatch)
   {
      cerr << "\nhddm-c: Error during parsing: '" << xmlFile << "'\n"
           << "Exception message is:  \n"
           << toCatch.msg.transcode() << "\n" << endl;
      XMLPlatformUtils::Terminate();
      return 4;
   }
   catch (...)
   {
      cerr << "\nhddm-c: Unexpected exception during parsing: '"
           << xmlFile << "'\n";
      XMLPlatformUtils::Terminate();
      return 4;
   }

   if (errorHandler.getSawErrors())
   {
      cerr << "\nErrors occured, no output available\n" << endl;
   }

   DOM_Document doc = parser.getDocument();
   DOM_Element rootEl = doc.getDocumentElement();
   char* rootStr = rootEl.getTagName().transcode();
   if (strcmp(rootStr,"HDDM") != 0)
   {
      cerr << "hddm-c error: root element of input document is "
           << "\"" << rootStr << "\", expected \"HDDM\""
           << endl;
      delete [] rootStr;
      return 1;
   }
   delete [] rootStr;

   classPrefix = rootEl.getAttribute("class").transcode();

   char hname[510];
   if (verifyOnly)
   {
      sprintf(hname,"/dev/null");
   }
   else if (hFilename)
   {
      sprintf(hname,"%s.h",hFilename);
   }
   else
   {
      sprintf(hname,"hddm_%s.h",classPrefix);
   }

   hFile.open(hname);
   if (! hFile.is_open())
   {
      cerr << "hddm-c error: unable to open output file "
           << hname << endl;
      return 1;
   }

   char cname[510];
   if (verifyOnly)
   {
      sprintf(cname,"/dev/null");
   }
   else if (hFilename)
   {
      sprintf(cname,"%s.c",hFilename);
   }
   else
   {
      sprintf(cname,"hddm_%s.c",classPrefix);
   }

   cFile.open(cname);
   if (! cFile.is_open())
   {
      cerr << "hddm-c error: unable to open output file "
           << cname << endl;
      return 1;
   }

   hFile << "/*"						<< endl
	 << " * " << hname << " - DO NOT EDIT THIS FILE"	<< endl
	 << " *"						<< endl
	 << " * This file was generated automatically by hddm-c"
	 << " from the file"					<< endl
         << " * " << xmlFile					<< endl
         << " * This header file defines the c structures that"
	 << " hold the data"					<< endl
	 << " * described in the data model"
         << " (from " << xmlFile << "). "			<< endl
	 << " * Any program that needs access to the data"
         << " described in the model"				<< endl
         << " * can include this header file, and make use"
	 << " of the input/output"				<< endl
         << " * services provided in " << cname			<< endl
	 << " *"						<< endl
	 << " * The hddm data model tool set was written by"	<< endl
	 << " * Richard Jones, University of Connecticut."	<< endl
	 << " *"						<< endl
	 << " * For more information see the following web site"<< endl
	 << " *"						<< endl
	 << " * http://zeus.phys.uconn.edu/halld/datamodel/doc"	<< endl
	 << " *"						<< endl
	 << " */"						<< endl
	 							<< endl;

   cFile << "/*"						<< endl
	 << " * " << cname << " - DO NOT EDIT THIS FILE"	<< endl
	 << " *"						<< endl
	 << " * This file was generated automatically by hddm-c"
	 << " from the file"					<< endl
         << " * " << xmlFile					<< endl
         << " * This c file contains the i/o interface to"
         << " the c structures"					<< endl
	 << " * described in the data model"
         << " (from " << xmlFile << "). "			<< endl
	 << " * Any program that needs access to the data"
         << " described in the model"				<< endl
         << " * can compile this source file, and make use"
	 << " of the input/output"				<< endl
         << " * services provided."				<< endl
	 << " *"						<< endl
	 << " * The hddm data model tool set was written by"	<< endl
	 << " * Richard Jones, University of Connecticut."	<< endl
	 << " *"						<< endl
	 << " * For more information see the following web site"<< endl
	 << " *"						<< endl
	 << " * http://zeus.phys.uconn.edu/halld/datamodel/doc"	<< endl
	 << " */"						<< endl
								<< endl;

   hFile << "#include <stdlib.h>" 				<< endl
	 << "#include <stdio.h>" 				<< endl
	 << "#include <string.h>"				<< endl
	 << "#include <particleType.h>"				<< endl
								<< endl
	 << "#define MALLOC(N,S) malloc(N)"			<< endl
	 << "#define CALLOC(N,S) calloc(N,1)"			<< endl
	 << "#define FREE(P) free(P)"				<< endl;

   cFile << "#include \"" << hname << "\"" 			<< endl;

   constructGroup(rootEl);
   constructMakeFuncs();

   hFile 							<< endl
	 << "#ifndef " << classPrefix << "_DocumentString" 	<< endl
	 << "#define " << classPrefix << "_DocumentString" 	<< endl
         							<< endl
	 << "extern "
	 << "char HDDM_" << classPrefix << "_DocumentString[];"	<< endl
         							<< endl
	 << "#endif /* " << classPrefix << "_DocumentString */"	<< endl;

   cFile							<< endl
	 << "char HDDM_" << classPrefix << "_DocumentString[]"
	 << " = \"\\n\""					<< endl;
   constructDocument(rootEl);
   cFile << ";"							<< endl;

   constructReadFunc(rootEl);
   constructFlushFunc(rootEl);
   constructOpenFunc(rootEl);
   constructInitFunc(rootEl);
   constructCloseFunc(rootEl);

   XMLPlatformUtils::Terminate();
   return 0;
}


MyOwnErrorHandler::MyOwnErrorHandler() : 
   fSawErrors(false)
{
}

MyOwnErrorHandler::~MyOwnErrorHandler()
{
}

/* Overrides of the SAX ErrorHandler interface */

void MyOwnErrorHandler::error(const SAXParseException& e)
{
   fSawErrors = true;
   cerr << "\nhddm-c: Error at file " << StrX(e.getSystemId())
        << ", line " << e.getLineNumber()
        << ", char " << e.getColumnNumber()
        << "\n  Message: " << StrX(e.getMessage()) << endl;
}

void MyOwnErrorHandler::fatalError(const SAXParseException& e)
{
   fSawErrors = true;
   cerr << "\nhddm-c: Fatal Error at file " << StrX(e.getSystemId())
        << ", line " << e.getLineNumber()
        << ", char " << e.getColumnNumber()
        << "\n  Message: " << StrX(e.getMessage()) << endl;
}

void MyOwnErrorHandler::warning(const SAXParseException& e)
{
   cerr << "\nhddm-c: Warning at file " << StrX(e.getSystemId())
        << ", line " << e.getLineNumber()
        << ", char " << e.getColumnNumber()
        << "\n  Message: " << StrX(e.getMessage()) << endl;
}

void MyOwnErrorHandler::resetErrors()
{
}
